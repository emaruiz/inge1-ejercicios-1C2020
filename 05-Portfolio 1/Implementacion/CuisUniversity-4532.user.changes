

----QUIT----(9 March 2021 14:58:42) CuisUniversity-4532.image priorSource: 13044060!

----STARTUP---- (9 March 2021 14:58:43) as /Users/hernan/Documents/Cuis/5.0-64Bits/Cuis-University-Installer/CuisUniversity-4532.image!


----QUIT----(9 March 2021 14:58:43) CuisUniversity-4532.image priorSource: 16885479!

----STARTUP---- (17 May 2021 20:16:59) as /home/bingani/Documentos/Ing 1/PRACTICAS/inge1-ejercicios-1C2021/05-Portfolio 1/Implementacion/CuisUniversity-4532.image!


----End fileIn of /home/bingani/Documentos/Ing 1/PRACTICAS/inge1-ejercicios-1C2021/05-Portfolio 1/Implementacion/Portfolio-Ejercicio.st----!

----QUIT----(17 May 2021 20:20:46) CuisUniversity-4532.image priorSource: 16885703!

----STARTUP---- (17 May 2021 20:20:52) as /home/bingani/Documentos/Ing 1/PRACTICAS/inge1-ejercicios-1C2021/05-Portfolio 1/Implementacion/CuisUniversity-4532.image!


!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'bi 5/17/2021 20:21:51'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'bi 5/17/2021 20:21:51'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'bi 5/17/2021 20:21:51'!
FAILURE!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'bi 5/17/2021 20:21:51'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'bi 5/17/2021 20:21:51'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'bi 5/17/2021 20:21:51'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'bi 5/17/2021 20:21:51'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'bi 5/17/2021 20:21:51'!
FAILURE!
!ReceptiveAccount methodsFor: 'balance' stamp: 'bi 5/17/2021 20:40:25' prior: 50859549!
balance

	^transactions sum: [ :aTransaction | 
		(aTransaction isKindOf: Withdraw) ifTrue: [ ^ (aTransaction value) * (-1) ]
	] ifEmpty: [ 0 ]! !
!ReceptiveAccount methodsFor: 'balance' stamp: 'bi 5/17/2021 20:42:57' prior: 50859602!
balance
	| value |

	^transactions sum: [ :aTransaction | 
		value := aTransaction value.
		(aTransaction isKindOf: Withdraw) ifTrue: [ ^ value negated ]
	] ifEmpty: [ 0 ]! !
!ReceptiveAccount methodsFor: 'balance' stamp: 'bi 5/17/2021 20:44:18' prior: 50859610!
balance
	| value |

	^transactions sum: [ :aTransaction | 
		value := aTransaction value.
		(aTransaction isKindOf: Withdraw) 
		ifTrue: [ ^ value negated ]
		ifFalse: [^ value ]
	] ifEmpty: [ 0 ]! !

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'bi 5/17/2021 20:44:23'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'bi 5/17/2021 20:44:23'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'bi 5/17/2021 20:44:23'!
FAILURE!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'bi 5/17/2021 20:44:23'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'bi 5/17/2021 20:44:23'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'bi 5/17/2021 20:44:23'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'bi 5/17/2021 20:44:23'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'bi 5/17/2021 20:44:23'!
FAILURE!
!ReceptiveAccount methodsFor: 'balance' stamp: 'bi 5/17/2021 20:46:10' prior: 50859619!
balance
	| value |

	^transactions sum: [ :aTransaction | 
		value := aTransaction value.
		(aTransaction isKindOf: Withdraw) 
		ifTrue: [ value negated ]
		ifFalse: [ value ]
	] ifEmpty: [ 0 ]! !

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'bi 5/17/2021 20:46:24'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'bi 5/17/2021 20:46:24'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'bi 5/17/2021 20:46:24'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'bi 5/17/2021 20:46:24'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'bi 5/17/2021 20:46:24'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'bi 5/17/2021 20:46:24'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'bi 5/17/2021 20:46:25'!
PASSED!
!ReceptiveAccount methodsFor: 'balance' stamp: 'bi 5/17/2021 20:50:32' prior: 50859659!
balance
	| value |

	^transactions sum: [ :aTransaction | 
		value := aTransaction value.
		(aTransaction isKindOf: Withdraw) 
			ifTrue: [ value negated ]
			ifFalse: [ value ]
	] ifEmpty: [ 0 ]! !
!ReceptiveAccount methodsFor: 'balance' stamp: 'bi 5/17/2021 20:52:17' prior: 50859695!
balance
	| value |

	^transactions sum: [ :aTransaction | 
		value := aTransaction value.
		(aTransaction isKindOf: Withdraw) 
			ifTrue: [value := value negated ]
		value
	] ifEmpty: [ 0 ]! !
!ReceptiveAccount methodsFor: 'balance' stamp: 'bi 5/17/2021 20:52:52' prior: 50859704!
balance
	| value |

	^transactions sum: [ :aTransaction | 
		value := aTransaction value.
		(aTransaction isKindOf: Withdraw) 	ifTrue: [value := value negated ].
		value
	] ifEmpty: [ 0 ]! !

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'bi 5/17/2021 20:52:56'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'bi 5/17/2021 20:52:56'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'bi 5/17/2021 20:52:56'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'bi 5/17/2021 20:52:56'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'bi 5/17/2021 20:52:56'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'bi 5/17/2021 20:52:56'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'bi 5/17/2021 20:52:56'!
PASSED!

TestCase subclass: #PortfolioTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

!classDefinition: #PortfolioTest category: 'Portfolio-Ejercicio' stamp: 'bi 5/17/2021 20:57:25'!
TestCase subclass: #PortfolioTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!
!PortfolioTest methodsFor: 'nil' stamp: 'bi 5/17/2021 20:57:50'!
test01

	! !

!classDefinition: #Portfolio category: 'Portfolio-Ejercicio' stamp: 'bi 5/17/2021 20:59:48'!
Object subclass: #Portfolio
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'bi 5/17/2021 20:59:20' prior: 50859760!
test01

	| portfolio |
	
	portfolio := Portfolio new.

	self assert: 0 equals: portfolio balance.! !

!testRun: #PortfolioTest #test01 stamp: 'bi 5/17/2021 21:00:05'!
ERROR!
!Portfolio methodsFor: 'no messages' stamp: 'bi 5/17/2021 21:02:06'!
balance

	^0! !

!testRun: #PortfolioTest #test01 stamp: 'bi 5/17/2021 21:02:11'!
PASSED!

!testRun: #PortfolioTest #test01 stamp: 'bi 5/17/2021 21:02:11'!
PASSED!
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'bi 5/17/2021 21:03:09'!
test02

	| portfolio |
	
	portfolio := Portfolio new.
	

	self assert: 0 equals: portfolio balance.! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'bi 5/17/2021 21:04:52' prior: 50859787!
test02

	| portfolio account |
	
	portfolio := Portfolio new.
	
	account := ReceptiveAccount  new.
	Deposit register: 100 on: account.

	

	self assert: 0 equals: portfolio balance.! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'bi 5/17/2021 21:06:05' prior: 50859794!
test02

	| portfolio account |
	
	portfolio := Portfolio new.
	
	account := ReceptiveAccount  new.
	Deposit register: 100 on: account.

	portfolio add: account.

	self assert: 0 equals: portfolio balance.! !

!testRun: #PortfolioTest #test02 stamp: 'bi 5/17/2021 21:06:08'!
ERROR!
!Portfolio methodsFor: 'nil' stamp: 'bi 5/17/2021 21:06:41'!
add: anAccount

	! !
!ReceptiveAccount methodsFor: 'balance' stamp: 'bi 5/17/2021 21:50:28' prior: 50859713!
balance

	| value |

	^transactions sum: [ :aTransaction | 
		value := aTransaction value.
		(aTransaction isKindOf: Withdraw) 	ifTrue: [value := value negated ].
		value
	] ifEmpty: [ 0 ]! !

----QUIT----(17 May 2021 22:09:39) CuisUniversity-4532.image priorSource: 16893206!

----STARTUP---- (19 May 2021 21:18:42) as /home/bingani/Documentos/Ing 1/PRACTICAS/inge1-ejercicios-1C2021/05-Portfolio 1/Implementacion/CuisUniversity-4532.image!

!ReceptiveAccount methodsFor: 'balance' stamp: 'bi 5/19/2021 21:28:08' prior: 50859818!
balance

	

	^(transactions collect: [:aTransaction | 
		aTransaction 
	])
	"sum: [ :aTransaction | 
		value := aTransaction value.
		(aTransaction isKindOf: Withdraw) 	ifTrue: [value := value negated ].
		value	
	]" 
	ifEmpty: [ 0 ]! !
!ReceptiveAccount methodsFor: 'balance' stamp: 'bi 5/19/2021 21:28:27' prior: 50859835!
balance

	| value |

	^(transactions collect: [:aTransaction | 
		value := aTransaction 
	])
	"sum: [ :aTransaction | 
		value := aTransaction value.
		(aTransaction isKindOf: Withdraw) 	ifTrue: [value := value negated ].
		value	
	]" 
	ifEmpty: [ 0 ]! !
!ReceptiveAccount methodsFor: 'balance' stamp: 'bi 5/19/2021 21:30:39' prior: 50859846!
balance

	| value |

	value := 0.
	^(transactions collect: [:aTransaction | 
		value := aTransaction addYourValueToTotal: value
	])
	"sum: [ :aTransaction | 
		value := aTransaction value.
		(aTransaction isKindOf: Withdraw) 	ifTrue: [value := value negated ].
		value	
	]" 
	ifEmpty: [ 0 ]! !
!AccountTransaction methodsFor: 'nil' stamp: 'bi 5/19/2021 21:33:27'!
addYourValueToTotal: aTotalAmount
	
	self subclassResponsibility .! !
!Deposit methodsFor: 'nil' stamp: 'bi 5/19/2021 21:34:48' overrides: 50859869!
addYourValueToTotal: aTotalAmount

	^aTotalAmount  + self value .! !
!Withdraw methodsFor: 'nil' stamp: 'bi 5/19/2021 21:35:02' overrides: 50859869!
addYourValueToTotal: aTotalAmount

	^aTotalAmount  - self value .! !
!Withdraw methodsFor: 'as yet unclassified' stamp: 'bi 5/19/2021 21:35:05' prior: 50859879 overrides: 50859869!
addYourValueToTotal: aTotalAmount

	^aTotalAmount - self value .! !
!Deposit methodsFor: 'as yet unclassified' stamp: 'bi 5/19/2021 21:35:15' prior: 50859874 overrides: 50859869!
addYourValueToTotal: aTotalAmount

	^aTotalAmount + self value .! !
!ReceptiveAccount methodsFor: 'balance' stamp: 'bi 5/19/2021 21:35:40' prior: 50859857!
balance

	| value |

	value := 0.
	^(transactions collect: [:aTransaction | 
		value := aTransaction addYourValueToTotal: value
	]) ifEmpty: [ 0 ]
	"sum: [ :aTransaction | 
		value := aTransaction value.
		(aTransaction isKindOf: Withdraw) 	ifTrue: [value := value negated ].
		value	
	] ifEmpty: [ 0 ]"! !

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'bi 5/19/2021 21:36:00'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'bi 5/19/2021 21:36:00'!
FAILURE!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'bi 5/19/2021 21:36:00'!
FAILURE!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'bi 5/19/2021 21:36:00'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'bi 5/19/2021 21:36:00'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'bi 5/19/2021 21:36:00'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'bi 5/19/2021 21:36:00'!
PASSED!

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'bi 5/19/2021 21:37:12'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'bi 5/19/2021 21:37:12'!
FAILURE!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'bi 5/19/2021 21:37:12'!
FAILURE!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'bi 5/19/2021 21:37:12'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'bi 5/19/2021 21:37:12'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'bi 5/19/2021 21:37:12'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'bi 5/19/2021 21:37:12'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'bi 5/19/2021 21:37:16'!
FAILURE!
!ReceptiveAccount methodsFor: 'balance' stamp: 'bi 5/19/2021 21:38:49' prior: 50859896!
balance

	| value |

	value := 0.
	^(transactions do: [:aTransaction | 
		value := aTransaction addYourValueToTotal: value
	]) ifEmpty: [ 0 ]
	"sum: [ :aTransaction | 
		value := aTransaction value.
		(aTransaction isKindOf: Withdraw) 	ifTrue: [value := value negated ].
		value	
	] ifEmpty: [ 0 ]"! !

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'bi 5/19/2021 21:38:53'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'bi 5/19/2021 21:38:53'!
FAILURE!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'bi 5/19/2021 21:38:53'!
FAILURE!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'bi 5/19/2021 21:38:53'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'bi 5/19/2021 21:38:53'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'bi 5/19/2021 21:38:53'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'bi 5/19/2021 21:38:53'!
PASSED!
!ReceptiveAccount methodsFor: 'balance' stamp: 'bi 5/19/2021 21:40:21' prior: 50859965!
balance

	| value |

	value := 0.
	value := (transactions do: [:aTransaction | 
		value := aTransaction addYourValueToTotal: value
	]) ifEmpty: [ 0 ].
	^value
	"sum: [ :aTransaction | 
		value := aTransaction value.
		(aTransaction isKindOf: Withdraw) 	ifTrue: [value := value negated ].
		value	
	] ifEmpty: [ 0 ]"! !
!ReceptiveAccount methodsFor: 'balance' stamp: 'bi 5/19/2021 21:40:36' prior: 50860004!
balance

	| value |

	value := 0.
	value := (transactions do: [:aTransaction | 		value := aTransaction addYourValueToTotal: value ]) ifEmpty: [ 0 ].
	^value
	"sum: [ :aTransaction | 
		value := aTransaction value.
		(aTransaction isKindOf: Withdraw) 	ifTrue: [value := value negated ].
		value	
	] ifEmpty: [ 0 ]"! !

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'bi 5/19/2021 21:40:56'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'bi 5/19/2021 21:40:56'!
FAILURE!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'bi 5/19/2021 21:40:56'!
FAILURE!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'bi 5/19/2021 21:40:56'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'bi 5/19/2021 21:40:56'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'bi 5/19/2021 21:40:56'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'bi 5/19/2021 21:40:56'!
PASSED!
!ReceptiveAccount methodsFor: 'balance' stamp: 'bi 5/19/2021 21:42:50' prior: 50860017!
balance

	| value |

	value := 0.
	value := (transactions do: [:aTransaction | 		value := aTransaction addYourValueToTotal: value ]).
	^value ifEmpty: [ 0 ]
	"sum: [ :aTransaction | 
		value := aTransaction value.
		(aTransaction isKindOf: Withdraw) 	ifTrue: [value := value negated ].
		value	
	] ifEmpty: [ 0 ]"! !

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'bi 5/19/2021 21:42:56'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'bi 5/19/2021 21:42:56'!
FAILURE!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'bi 5/19/2021 21:42:56'!
FAILURE!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'bi 5/19/2021 21:42:56'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'bi 5/19/2021 21:42:56'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'bi 5/19/2021 21:42:56'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'bi 5/19/2021 21:42:56'!
PASSED!

----End fileIn of /home/bingani/Documentos/Ing 1/PRACTICAS/inge1-ejercicios-1C2021/05-Portfolio 1/Implementacion/Packages/TerseGuide.pck.st----!
!ReceptiveAccount methodsFor: 'balance' stamp: 'bi 5/19/2021 21:47:31' prior: 50860056!
balance

	| value |

	value := 0. transactions do: [:aTransaction | 		value := aTransaction addYourValueToTotal: value ].
	^ value.! !

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'bi 5/19/2021 21:47:36'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'bi 5/19/2021 21:47:36'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'bi 5/19/2021 21:47:36'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'bi 5/19/2021 21:47:36'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'bi 5/19/2021 21:47:36'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'bi 5/19/2021 21:47:36'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'bi 5/19/2021 21:47:36'!
PASSED!

----QUIT----(19 May 2021 21:48:33) CuisUniversity-4532.image priorSource: 16901631!

----STARTUP---- (20 May 2021 20:11:34) as /home/bingani/Documentos/Ing 1/PRACTICAS/inge1-ejercicios-1C2021/05-Portfolio 1/Implementacion/CuisUniversity-4532.image!


!testRun: #PortfolioTest #test01 stamp: 'bi 5/20/2021 20:13:14'!
PASSED!

!testRun: #PortfolioTest #test02 stamp: 'bi 5/20/2021 20:13:14'!
PASSED!
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'bi 5/20/2021 20:14:31'!
test03

	| portfolio account |
	
	portfolio := Portfolio new.
	
	account := ReceptiveAccount  new.
	Deposit register: 100 on: account.
	Deposit register: 50 on: account.

	portfolio add: account.

	self assert: 0 equals: portfolio balance.! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'bi 5/20/2021 20:15:47' prior: 50859803!
test02

	| portfolio account |
	
	portfolio := Portfolio new.
	
	account := ReceptiveAccount  new.
	Deposit register: 100 on: account.

	portfolio add: account.

	self assert: 100 equals: portfolio balance.! !

!testRun: #PortfolioTest #test01 stamp: 'bi 5/20/2021 20:15:51'!
PASSED!

!testRun: #PortfolioTest #test02 stamp: 'bi 5/20/2021 20:15:51'!
FAILURE!

!testRun: #PortfolioTest #test03 stamp: 'bi 5/20/2021 20:15:51'!
PASSED!

!testRun: #PortfolioTest #test02 stamp: 'bi 5/20/2021 20:15:51'!
FAILURE!

!testRun: #PortfolioTest #test01 stamp: 'bi 5/20/2021 20:16:13'!
PASSED!

!testRun: #PortfolioTest #test02 stamp: 'bi 5/20/2021 20:16:13'!
FAILURE!

!testRun: #PortfolioTest #test03 stamp: 'bi 5/20/2021 20:16:13'!
PASSED!

!testRun: #PortfolioTest #test02 stamp: 'bi 5/20/2021 20:16:13'!
FAILURE!

!testRun: #PortfolioTest #test02 stamp: 'bi 5/20/2021 20:16:38'!
FAILURE!

Object subclass: #Portfolio
	instanceVariableNames: 'accounts'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

!classDefinition: #Portfolio category: 'Portfolio-Ejercicio' stamp: 'bi 5/20/2021 20:18:31'!
Object subclass: #Portfolio
	instanceVariableNames: 'accounts'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!
!Portfolio methodsFor: 'as yet unclassified' stamp: 'bi 5/20/2021 20:21:14'!
register: anAccount

	! !

!methodRemoval: Portfolio #add: stamp: 'bi 5/20/2021 20:21:19'!
add: anAccount

	!

!methodRemoval: PortfolioTest #test03 stamp: 'bi 5/20/2021 20:21:33'!
test03

	| portfolio account |
	
	portfolio := Portfolio new.
	
	account := ReceptiveAccount  new.
	Deposit register: 100 on: account.
	Deposit register: 50 on: account.

	portfolio add: account.

	self assert: 0 equals: portfolio balance.!
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'bi 5/20/2021 20:21:37' prior: 50863080!
test02

	| portfolio account |
	
	portfolio := Portfolio new.
	
	account := ReceptiveAccount  new.
	Deposit register: 100 on: account.

	portfolio register: account.

	self assert: 100 equals: portfolio balance.! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'bi 5/20/2021 20:22:19' prior: 50863122!
register: anAccount

	accounts add: anAccount 

	! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'bi 5/20/2021 20:23:53' prior: 50859779!
balance

	^0! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'bi 5/20/2021 20:27:30' prior: 50863154!
balance

	^accounts sum: [:anAccount |  anAccount balance]! !

!testRun: #PortfolioTest #test01 stamp: 'bi 5/20/2021 20:27:37'!
ERROR!

!testRun: #PortfolioTest #test02 stamp: 'bi 5/20/2021 20:27:37'!
ERROR!

!testRun: #PortfolioTest #test01 stamp: 'bi 5/20/2021 20:27:43'!
ERROR!
!Portfolio methodsFor: 'as yet unclassified' stamp: 'bi 5/20/2021 20:28:14' prior: 50863158!
balance

	^accounts sum: [:anAccount |  anAccount balance] ifEmpty: [0]! !

!testRun: #PortfolioTest #test01 stamp: 'bi 5/20/2021 20:28:20'!
ERROR!

!testRun: #PortfolioTest #test02 stamp: 'bi 5/20/2021 20:28:20'!
ERROR!

!testRun: #PortfolioTest #test01 stamp: 'bi 5/20/2021 20:28:23'!
ERROR!

!testRun: #PortfolioTest #test01 stamp: 'bi 5/20/2021 20:28:33'!
ERROR!
!ReceptiveAccount class methodsFor: 'nil' stamp: 'bi 5/20/2021 20:33:26'!
register: aValue on: portfolio

	| account |
	
	account := self for: aValue.
	account register: portfolio.
		
	^ account! !

!methodRemoval: ReceptiveAccount class #register:on: stamp: 'bi 5/20/2021 20:36:21'!
register: aValue on: portfolio

	| account |
	
	account := self for: aValue.
	account register: portfolio.
		
	^ account!
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'bi 5/20/2021 20:36:57' prior: 50863139!
test02

	| portfolio account |
	
	account := ReceptiveAccount  new.
	Deposit register: 100 on: account.

	portfolio := Portfolio new.
	portfolio register: account.

	self assert: 100 equals: portfolio balance.! !

!testRun: #PortfolioTest #test01 stamp: 'bi 5/20/2021 20:37:07'!
ERROR!

!testRun: #PortfolioTest #test02 stamp: 'bi 5/20/2021 20:37:07'!
ERROR!

!testRun: #PortfolioTest #test01 stamp: 'bi 5/20/2021 20:37:09'!
ERROR!

!testRun: #PortfolioTest #test01 stamp: 'bi 5/20/2021 20:37:24'!
ERROR!
!Portfolio methodsFor: 'as yet unclassified' stamp: 'bi 5/20/2021 20:38:48' prior: 50863170!
balance

	^(accounts sum: [:anAccount |  anAccount balance]) ifEmpty: [0]! !

!testRun: #PortfolioTest #test01 stamp: 'bi 5/20/2021 20:38:52'!
ERROR!

!testRun: #PortfolioTest #test02 stamp: 'bi 5/20/2021 20:38:52'!
ERROR!

!testRun: #PortfolioTest #test01 stamp: 'bi 5/20/2021 20:38:56'!
ERROR!

!testRun: #PortfolioTest #test01 stamp: 'bi 5/20/2021 20:39:13'!
ERROR!
!Portfolio methodsFor: 'as yet unclassified' stamp: 'bi 5/20/2021 20:41:04' overrides: 16896425!
initialize

	accounts := OrderedCollection new.! !

!testRun: #PortfolioTest #test01 stamp: 'bi 5/20/2021 20:41:12'!
ERROR!

!testRun: #PortfolioTest #test02 stamp: 'bi 5/20/2021 20:41:12'!
ERROR!

!testRun: #PortfolioTest #test01 stamp: 'bi 5/20/2021 20:41:13'!
ERROR!

!testRun: #PortfolioTest #test01 stamp: 'bi 5/20/2021 20:41:40'!
ERROR!

----End fileIn of /home/bingani/Documentos/Ing 1/Codigo materia/Portfolio-Ejercicio.st----!

----End fileIn of /home/bingani/Documentos/Ing 1/PRACTICAS/inge1-ejercicios-1C2021/05-Portfolio 1/Implementacion/Portfolio-Ejercicio.st----!
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'bi 5/20/2021 20:46:21' prior: 50863499!
test02

	| portfolio account |
	
	portfolio := Portfolio new.
	
	account := ReceptiveAccount  new.
	Deposit register: 100 on: account.

	portfolio add: account.

	self assert: 100 equals: portfolio balance.! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'bi 5/20/2021 20:46:30' prior: 50863781!
test02

	| portfolio account |
	
	account := ReceptiveAccount  new.
	Deposit register: 100 on: account.

	portfolio := Portfolio new.
	portfolio add: account.

	self assert: 100 equals: portfolio balance.! !

!methodRemoval: Portfolio #add: stamp: 'bi 5/20/2021 20:46:40'!
add: anAccount

	!

Object subclass: #Portfolio
	instanceVariableNames: 'accounts'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

!classDefinition: #Portfolio category: 'Portfolio-Ejercicio' stamp: 'bi 5/20/2021 20:46:52'!
Object subclass: #Portfolio
	instanceVariableNames: 'accounts'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'bi 5/20/2021 20:47:05' prior: 50863791!
test02

	| portfolio account |
	
	account := ReceptiveAccount  new.
	Deposit register: 100 on: account.

	portfolio := Portfolio new.
	portfolio register: account.

	self assert: 100 equals: portfolio balance.! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'bi 5/20/2021 20:47:32' prior: 50863732!
balance

	^accounts sum: [ :aTransaction | aTransaction value ] ifEmpty: [ 0 ]! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'bi 5/20/2021 20:47:47' prior: 50863826!
balance

	^accounts sum: [ :anAccount | anAccount value ] ifEmpty: [ 0 ]! !

!testRun: #PortfolioTest #test01 stamp: 'bi 5/20/2021 20:47:53'!
PASSED!

!testRun: #PortfolioTest #test02 stamp: 'bi 5/20/2021 20:47:53'!
FAILURE!

!testRun: #PortfolioTest #test02 stamp: 'bi 5/20/2021 20:47:53'!
FAILURE!

!testRun: #PortfolioTest #test01 stamp: 'bi 5/20/2021 20:48:12'!
PASSED!

!testRun: #PortfolioTest #test02 stamp: 'bi 5/20/2021 20:48:45'!
FAILURE!

!testRun: #PortfolioTest #test02 stamp: 'bi 5/20/2021 20:48:45'!
FAILURE!
!Portfolio methodsFor: 'as yet unclassified' stamp: 'bi 5/20/2021 20:49:45' prior: 50863832!
balance

	^accounts sum: [ :anAccount | anAccount balance ] ifEmpty: [ 0 ]! !

!testRun: #PortfolioTest #test01 stamp: 'bi 5/20/2021 20:49:49'!
PASSED!

!testRun: #PortfolioTest #test02 stamp: 'bi 5/20/2021 20:49:49'!
PASSED!
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'bi 5/20/2021 20:50:20'!
test03

	| portfolio account |
	
	account := ReceptiveAccount  new.
	Deposit register: 100 on: account.
	Deposit register: 50 on: account.

	portfolio := Portfolio new.
	portfolio register: account.

	self assert: 150 equals: portfolio balance.! !

!testRun: #PortfolioTest #test01 stamp: 'bi 5/20/2021 20:50:27'!
PASSED!

!testRun: #PortfolioTest #test02 stamp: 'bi 5/20/2021 20:50:27'!
PASSED!

!testRun: #PortfolioTest #test03 stamp: 'bi 5/20/2021 20:50:27'!
PASSED!
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'bi 5/20/2021 20:50:48' prior: 50863862!
test03

	| portfolio account |
	
	account := ReceptiveAccount  new.
	Deposit register: 100 on: account.
	Withdraw register: 50 on: account.

	portfolio := Portfolio new.
	portfolio register: account.

	self assert: 50 equals: portfolio balance.! !

!testRun: #PortfolioTest #test01 stamp: 'bi 5/20/2021 20:50:54'!
PASSED!

!testRun: #PortfolioTest #test02 stamp: 'bi 5/20/2021 20:50:54'!
PASSED!

!testRun: #PortfolioTest #test03 stamp: 'bi 5/20/2021 20:50:54'!
PASSED!
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'bi 5/20/2021 20:52:09' prior: 50863880!
test03

	| portfolio account1 account2|
	
	account1 := ReceptiveAccount  new.
	Deposit register: 100 on: account1.
	Withdraw register: 50 on: account1.
	
	account2 := ReceptiveAccount  new.
	Deposit register: 50 on: account2.

	portfolio := Portfolio new.
	portfolio register: account1.
	portfolio register: account2.

	self assert: 100 equals: portfolio balance.! !

!testRun: #PortfolioTest #test03 stamp: 'bi 5/20/2021 20:52:12'!
PASSED!

!testRun: #PortfolioTest #test01 stamp: 'bi 5/20/2021 20:52:12'!
PASSED!

!testRun: #PortfolioTest #test02 stamp: 'bi 5/20/2021 20:52:12'!
PASSED!

!testRun: #PortfolioTest #test03 stamp: 'bi 5/20/2021 20:52:12'!
PASSED!
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'bi 5/20/2021 20:54:24'!
test01PortfolioHaveZeroAsBalanceWhenCreated 

	| portfolio |
	
	portfolio := Portfolio new.

	self assert: 0 equals: portfolio balance.! !

!methodRemoval: PortfolioTest #test01 stamp: 'bi 5/20/2021 20:54:28'!
test01

	| portfolio |
	
	portfolio := Portfolio new.

	self assert: 0 equals: portfolio balance.!
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'bi 5/20/2021 20:58:15'!
test02AccountIncreasesBalanceInTheValueOfYourTransaction

	| portfolio account |
	
	account := ReceptiveAccount  new.
	Deposit register: 100 on: account.

	portfolio := Portfolio new.
	portfolio register: account.

	self assert: 100 equals: portfolio balance.! !

!methodRemoval: PortfolioTest #test02 stamp: 'bi 5/20/2021 20:58:18'!
test02

	| portfolio account |
	
	account := ReceptiveAccount  new.
	Deposit register: 100 on: account.

	portfolio := Portfolio new.
	portfolio register: account.

	self assert: 100 equals: portfolio balance.!
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'bi 5/20/2021 21:01:06' prior: 50863898!
test03

	| account portfolio |
	
	account := ReceptiveAccount new.
	Deposit register: 100 on: account.
	Withdraw register: 50 on: account.
	
	portfolio := Portfolio new.
	portfolio register: account.
		
	self assert: (account hasRegistered: account ).	
	
	"account1 := ReceptiveAccount  new.
	Deposit register: 100 on: account1.
	Withdraw register: 50 on: account1.
	
	portfolio := Portfolio new.
	portfolio register: account1.

	self assert: 100 equals: portfolio balance."! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'bi 5/20/2021 21:04:28' prior: 50863956!
test03

	| account deposit withdraw portfolio |
	
	account := ReceptiveAccount new.
	deposit := Deposit register: 100 on: account.
	withdraw := Withdraw register: 50 on: account.
	
	portfolio := Portfolio new.
	portfolio register: account.
		
	self assert: (account hasRegistered: deposit).	
	
	"account1 := ReceptiveAccount  new.
	Deposit register: 100 on: account1.
	Withdraw register: 50 on: account1.
	
	portfolio := Portfolio new.
	portfolio register: account1.

	self assert: 100 equals: portfolio balance."! !

----QUIT----(20 May 2021 22:02:51) CuisUniversity-4532.image priorSource: 17004975!

----STARTUP---- (22 May 2021 13:10:10) as /home/bingani/Documentos/Ing 1/PRACTICAS/inge1-ejercicios-1C2021/05-Portfolio 1/Implementacion/CuisUniversity-4532.image!

!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'bi 5/22/2021 15:03:13' prior: 50863974!
test03

	| account deposit withdraw portfolio |
	
	account := ReceptiveAccount new.
	deposit := Deposit register: 100 on: account.
	withdraw := Withdraw register: 50 on: account.
	
	portfolio := Portfolio new.
	portfolio register: account.
		
	self assert: (portfolio hasRegistered: deposit).	
	self assert: (portfolio hasRegistered: withdraw).
	
	"| account deposit withdraw |
	
	account := ReceptiveAccount new.
	deposit := Deposit register: 100 on: account.
	withdraw := Withdraw register: 50 on: account.
		
	self assert: (account hasRegistered: deposit).
	self assert: (account hasRegistered: withdraw)."
	
	"account1 := ReceptiveAccount  new.
	Deposit register: 100 on: account1.
	Withdraw register: 50 on: account1.
	
	portfolio := Portfolio new.
	portfolio register: account1.

	self assert: 100 equals: portfolio balance."! !

!testRun: #PortfolioTest #test03 stamp: 'bi 5/22/2021 15:18:27'!
ERROR!
!Portfolio methodsFor: 'as yet unclassified' stamp: 'bi 5/22/2021 15:19:26'!
hasRegistered: aTransaction

	^true! !

!testRun: #PortfolioTest #test03 stamp: 'bi 5/22/2021 15:20:02'!
PASSED!

!testRun: #PortfolioTest #test01PortfolioHaveZeroAsBalanceWhenCreated stamp: 'bi 5/22/2021 15:20:02'!
PASSED!

!testRun: #PortfolioTest #test02AccountIncreasesBalanceInTheValueOfYourTransaction stamp: 'bi 5/22/2021 15:20:02'!
PASSED!

!testRun: #PortfolioTest #test03 stamp: 'bi 5/22/2021 15:20:02'!
PASSED!
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'bi 5/22/2021 15:20:27'!
test04

	| account deposit withdraw portfolio |
	
	account := ReceptiveAccount new.
	withdraw := Withdraw register: 50 on: account.
	
	portfolio := Portfolio new.
	portfolio register: account.
		
	self assert: (portfolio hasRegistered: deposit).	
	self assert: (portfolio hasRegistered: withdraw).
	
	"| account deposit withdraw |
	
	account := ReceptiveAccount new.
	deposit := Deposit register: 100 on: account.
	withdraw := Withdraw register: 50 on: account.
		
	self assert: (account hasRegistered: deposit).
	self assert: (account hasRegistered: withdraw)."
	
	"account1 := ReceptiveAccount  new.
	Deposit register: 100 on: account1.
	Withdraw register: 50 on: account1.
	
	portfolio := Portfolio new.
	portfolio register: account1.

	self assert: 100 equals: portfolio balance."! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'bi 5/22/2021 15:21:31' prior: 50864049!
test04

	| account deposit withdraw portfolio |
	
	account := ReceptiveAccount new.
	withdraw := Withdraw register: 50 on: account.
	
	portfolio := Portfolio new.
	portfolio register: account.
		
	self assert: (portfolio hasRegistered: deposit).	
	self assert: (portfolio hasRegistered: withdraw).
	
	"| account deposit withdraw |
	
	account := ReceptiveAccount new.
	deposit := Deposit register: 100 on: account.
	withdraw := Withdraw register: 50 on: account.
		
	self assert: (account hasRegistered: deposit).
	self assert: (account hasRegistered: withdraw)."
	
	"account1 := ReceptiveAccount  new.
	Deposit register: 100 on: account1.
	Withdraw register: 50 on: account1.
	
	portfolio := Portfolio new.
	portfolio register: account1.

	self assert: 100 equals: portfolio balance."! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'bi 5/22/2021 15:21:49' prior: 50864077!
test04

	| account deposit withdraw portfolio |
	
	account := ReceptiveAccount new.
	deposit := Deposit register: 100 on: account.
	withdraw := Withdraw for: 50.
	
	portfolio := Portfolio new.
	portfolio register: account.
		
	self assert: (portfolio hasRegistered: deposit).	
	self assert: (portfolio hasRegistered: withdraw).
	
	"| account deposit withdraw |
	
	account := ReceptiveAccount new.
	deposit := Deposit register: 100 on: account.
	withdraw := Withdraw register: 50 on: account.
		
	self assert: (account hasRegistered: deposit).
	self assert: (account hasRegistered: withdraw)."
	
	"account1 := ReceptiveAccount  new.
	Deposit register: 100 on: account1.
	Withdraw register: 50 on: account1.
	
	portfolio := Portfolio new.
	portfolio register: account1.

	self assert: 100 equals: portfolio balance."! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'bi 5/22/2021 15:22:04' prior: 50864105!
test04

	| account deposit withdraw portfolio |
	
	account := ReceptiveAccount new.
	deposit := Deposit register: 100 on: account.
	withdraw := Withdraw for: 50.
	
	portfolio := Portfolio new.
	portfolio register: account.
		
	self assert: (portfolio hasRegistered: deposit).	
	self deny: (portfolio hasRegistered: withdraw).
	
	"| account deposit withdraw |
	
	account := ReceptiveAccount new.
	deposit := Deposit register: 100 on: account.
	withdraw := Withdraw register: 50 on: account.
		
	self assert: (account hasRegistered: deposit).
	self assert: (account hasRegistered: withdraw)."
	
	"account1 := ReceptiveAccount  new.
	Deposit register: 100 on: account1.
	Withdraw register: 50 on: account1.
	
	portfolio := Portfolio new.
	portfolio register: account1.

	self assert: 100 equals: portfolio balance."! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'bi 5/22/2021 15:22:11' prior: 50864134!
test04

	| account deposit withdraw portfolio |
	
	account := ReceptiveAccount new.
	deposit := Deposit register: 100 on: account.
	withdraw := Withdraw for: 50.
	
	portfolio := Portfolio new.
	portfolio register: account.
		
	self assert: (portfolio hasRegistered: deposit).	
	self deny: (portfolio hasRegistered: withdraw).! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'bi 5/22/2021 15:22:20' prior: 50864002!
test03

	| account deposit withdraw portfolio |
	
	account := ReceptiveAccount new.
	deposit := Deposit register: 100 on: account.
	withdraw := Withdraw register: 50 on: account.
	
	portfolio := Portfolio new.
	portfolio register: account.
		
	self assert: (portfolio hasRegistered: deposit).	
	self assert: (portfolio hasRegistered: withdraw).! !

!testRun: #PortfolioTest #test04 stamp: 'bi 5/22/2021 15:24:27'!
FAILURE!

!testRun: #PortfolioTest #test04 stamp: 'bi 5/22/2021 15:35:13'!
FAILURE!
!Portfolio methodsFor: 'as yet unclassified' stamp: 'bi 5/22/2021 15:35:59' prior: 50864033!
hasRegistered: aTransaction

	^accounts anySatisfy: [:anAccount | anAccount hasRegistered: aTransaction ]! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'bi 5/22/2021 15:36:04' prior: 50864196!
hasRegistered: aTransaction

	^accounts anySatisfy: [:anAccount | anAccount hasRegistered: aTransaction ].! !

!testRun: #PortfolioTest #test01PortfolioHaveZeroAsBalanceWhenCreated stamp: 'bi 5/22/2021 15:36:07'!
PASSED!

!testRun: #PortfolioTest #test02AccountIncreasesBalanceInTheValueOfYourTransaction stamp: 'bi 5/22/2021 15:36:07'!
PASSED!

!testRun: #PortfolioTest #test03 stamp: 'bi 5/22/2021 15:36:07'!
PASSED!

!testRun: #PortfolioTest #test04 stamp: 'bi 5/22/2021 15:36:07'!
PASSED!
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'bi 5/22/2021 15:37:48'!
test03PortfolioKnowsRegisteredTransactionsOfYourAccounts

	| account deposit withdraw portfolio |
	
	account := ReceptiveAccount new.
	deposit := Deposit register: 100 on: account.
	withdraw := Withdraw register: 50 on: account.
	
	portfolio := Portfolio new.
	portfolio register: account.
		
	self assert: (portfolio hasRegistered: deposit).	
	self assert: (portfolio hasRegistered: withdraw).! !

!methodRemoval: PortfolioTest #test03 stamp: 'bi 5/22/2021 15:37:53'!
test03

	| account deposit withdraw portfolio |
	
	account := ReceptiveAccount new.
	deposit := Deposit register: 100 on: account.
	withdraw := Withdraw register: 50 on: account.
	
	portfolio := Portfolio new.
	portfolio register: account.
		
	self assert: (portfolio hasRegistered: deposit).	
	self assert: (portfolio hasRegistered: withdraw).!
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'bi 5/22/2021 15:38:54'!
test04PortfolioDoNotKnowsRegisteredTransactionsOfYourAccounts

	| account deposit withdraw portfolio |
	
	account := ReceptiveAccount new.
	deposit := Deposit register: 100 on: account.
	withdraw := Withdraw for: 50.
	
	portfolio := Portfolio new.
	portfolio register: account.
		
	self assert: (portfolio hasRegistered: deposit).	
	self deny: (portfolio hasRegistered: withdraw).! !

!methodRemoval: PortfolioTest #test04 stamp: 'bi 5/22/2021 15:38:54'!
test04

	| account deposit withdraw portfolio |
	
	account := ReceptiveAccount new.
	deposit := Deposit register: 100 on: account.
	withdraw := Withdraw for: 50.
	
	portfolio := Portfolio new.
	portfolio register: account.
		
	self assert: (portfolio hasRegistered: deposit).	
	self deny: (portfolio hasRegistered: withdraw).!
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'bi 5/22/2021 15:39:49'!
test04PortfolioDoNotKnowNotRegisteredTransactionsOfYourAccounts

	| account deposit withdraw portfolio |
	
	account := ReceptiveAccount new.
	deposit := Deposit register: 100 on: account.
	withdraw := Withdraw for: 50.
	
	portfolio := Portfolio new.
	portfolio register: account.
		
	self assert: (portfolio hasRegistered: deposit).	
	self deny: (portfolio hasRegistered: withdraw).! !

!methodRemoval: PortfolioTest #test04PortfolioDoNotKnowsRegisteredTransactionsOfYourAccounts stamp: 'bi 5/22/2021 15:39:49'!
test04PortfolioDoNotKnowsRegisteredTransactionsOfYourAccounts

	| account deposit withdraw portfolio |
	
	account := ReceptiveAccount new.
	deposit := Deposit register: 100 on: account.
	withdraw := Withdraw for: 50.
	
	portfolio := Portfolio new.
	portfolio register: account.
		
	self assert: (portfolio hasRegistered: deposit).	
	self deny: (portfolio hasRegistered: withdraw).!
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'bi 5/22/2021 15:44:23'!
test02AccountIncreasesPortfolioBalanceValueOfYourTransactions

	| portfolio account |
	
	account := ReceptiveAccount  new.
	Deposit register: 100 on: account.

	portfolio := Portfolio new.
	portfolio register: account.

	self assert: 100 equals: portfolio balance.! !

!methodRemoval: PortfolioTest #test02AccountIncreasesBalanceInTheValueOfYourTransaction stamp: 'bi 5/22/2021 15:44:23'!
test02AccountIncreasesBalanceInTheValueOfYourTransaction

	| portfolio account |
	
	account := ReceptiveAccount  new.
	Deposit register: 100 on: account.

	portfolio := Portfolio new.
	portfolio register: account.

	self assert: 100 equals: portfolio balance.!
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'bi 5/22/2021 15:47:24'!
test05

	| portfolioIn portfolioOut account |
	
	account := ReceptiveAccount  new.
	Deposit register: 100 on: account.

	portfolioIn := Portfolio new.
	portfolioIn register: account.
	
	portfolioOut := Portfolio new.
	portfolioOut register: portfolioIn 

! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'bi 5/22/2021 15:59:47' prior: 50864330!
test05

	| portfolioIn portfolioOut account |
	
	account := ReceptiveAccount  new.
	Deposit register: 100 on: account.

	portfolioIn := Portfolio new.
	portfolioIn register: account.
	
	portfolioOut := Portfolio new.
	portfolioOut register: portfolioIn

! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'bi 5/22/2021 16:00:26' prior: 50864342!
test05

	| portfolioIn portfolioOut account |
	
	account := ReceptiveAccount  new.
	Deposit register: 100 on: account.

	portfolioIn := Portfolio new.
	portfolioIn register: account.
	
	portfolioOut := Portfolio new.
	portfolioOut register: portfolioIn.
	
	self assert: 100 equals: portfolioIn balance.
	self assert: 100 equals: portfolioOut balance.

! !

!testRun: #PortfolioTest #test05 stamp: 'bi 5/22/2021 16:00:32'!
PASSED!

!testRun: #PortfolioTest #test01PortfolioHaveZeroAsBalanceWhenCreated stamp: 'bi 5/22/2021 16:00:32'!
PASSED!

!testRun: #PortfolioTest #test02AccountIncreasesPortfolioBalanceValueOfYourTransactions stamp: 'bi 5/22/2021 16:00:32'!
PASSED!

!testRun: #PortfolioTest #test03PortfolioKnowsRegisteredTransactionsOfYourAccounts stamp: 'bi 5/22/2021 16:00:32'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioDoNotKnowNotRegisteredTransactionsOfYourAccounts stamp: 'bi 5/22/2021 16:00:32'!
PASSED!

!testRun: #PortfolioTest #test05 stamp: 'bi 5/22/2021 16:00:32'!
PASSED!

!testRun: #PortfolioTest #test05 stamp: 'bi 5/22/2021 16:00:36'!
PASSED!

!testRun: #PortfolioTest #test01PortfolioHaveZeroAsBalanceWhenCreated stamp: 'bi 5/22/2021 16:00:36'!
PASSED!

!testRun: #PortfolioTest #test02AccountIncreasesPortfolioBalanceValueOfYourTransactions stamp: 'bi 5/22/2021 16:00:36'!
PASSED!

!testRun: #PortfolioTest #test03PortfolioKnowsRegisteredTransactionsOfYourAccounts stamp: 'bi 5/22/2021 16:00:36'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioDoNotKnowNotRegisteredTransactionsOfYourAccounts stamp: 'bi 5/22/2021 16:00:36'!
PASSED!

!testRun: #PortfolioTest #test05 stamp: 'bi 5/22/2021 16:00:36'!
PASSED!

!testRun: #PortfolioTest #test01PortfolioHaveZeroAsBalanceWhenCreated stamp: 'bi 5/22/2021 16:00:39'!
PASSED!

!testRun: #PortfolioTest #test02AccountIncreasesPortfolioBalanceValueOfYourTransactions stamp: 'bi 5/22/2021 16:00:39'!
PASSED!

!testRun: #PortfolioTest #test03PortfolioKnowsRegisteredTransactionsOfYourAccounts stamp: 'bi 5/22/2021 16:00:39'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioDoNotKnowNotRegisteredTransactionsOfYourAccounts stamp: 'bi 5/22/2021 16:00:39'!
PASSED!

!testRun: #PortfolioTest #test05 stamp: 'bi 5/22/2021 16:00:39'!
PASSED!

!testRun: #PortfolioTest #test01PortfolioHaveZeroAsBalanceWhenCreated stamp: 'bi 5/22/2021 16:00:42'!
PASSED!

!testRun: #PortfolioTest #test02AccountIncreasesPortfolioBalanceValueOfYourTransactions stamp: 'bi 5/22/2021 16:00:42'!
PASSED!

!testRun: #PortfolioTest #test03PortfolioKnowsRegisteredTransactionsOfYourAccounts stamp: 'bi 5/22/2021 16:00:42'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioDoNotKnowNotRegisteredTransactionsOfYourAccounts stamp: 'bi 5/22/2021 16:00:42'!
PASSED!

!testRun: #PortfolioTest #test05 stamp: 'bi 5/22/2021 16:00:42'!
PASSED!

!testRun: #PortfolioTest #test05 stamp: 'bi 5/22/2021 16:00:44'!
PASSED!

!testRun: #PortfolioTest #test05 stamp: 'bi 5/22/2021 16:00:49'!
PASSED!

!testRun: #PortfolioTest #test05 stamp: 'bi 5/22/2021 16:00:54'!
PASSED!

!testRun: #PortfolioTest #test01PortfolioHaveZeroAsBalanceWhenCreated stamp: 'bi 5/22/2021 16:00:54'!
PASSED!

!testRun: #PortfolioTest #test02AccountIncreasesPortfolioBalanceValueOfYourTransactions stamp: 'bi 5/22/2021 16:00:54'!
PASSED!

!testRun: #PortfolioTest #test03PortfolioKnowsRegisteredTransactionsOfYourAccounts stamp: 'bi 5/22/2021 16:00:54'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioDoNotKnowNotRegisteredTransactionsOfYourAccounts stamp: 'bi 5/22/2021 16:00:54'!
PASSED!

!testRun: #PortfolioTest #test05 stamp: 'bi 5/22/2021 16:00:54'!
PASSED!

!testRun: #PortfolioTest #test01PortfolioHaveZeroAsBalanceWhenCreated stamp: 'bi 5/22/2021 16:00:59'!
PASSED!

!testRun: #PortfolioTest #test02AccountIncreasesPortfolioBalanceValueOfYourTransactions stamp: 'bi 5/22/2021 16:00:59'!
PASSED!

!testRun: #PortfolioTest #test03PortfolioKnowsRegisteredTransactionsOfYourAccounts stamp: 'bi 5/22/2021 16:00:59'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioDoNotKnowNotRegisteredTransactionsOfYourAccounts stamp: 'bi 5/22/2021 16:00:59'!
PASSED!

!testRun: #PortfolioTest #test05 stamp: 'bi 5/22/2021 16:00:59'!
PASSED!

!testRun: #PortfolioTest #test01PortfolioHaveZeroAsBalanceWhenCreated stamp: 'bi 5/22/2021 16:01:01'!
PASSED!

!testRun: #PortfolioTest #test02AccountIncreasesPortfolioBalanceValueOfYourTransactions stamp: 'bi 5/22/2021 16:01:01'!
PASSED!

!testRun: #PortfolioTest #test03PortfolioKnowsRegisteredTransactionsOfYourAccounts stamp: 'bi 5/22/2021 16:01:01'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioDoNotKnowNotRegisteredTransactionsOfYourAccounts stamp: 'bi 5/22/2021 16:01:01'!
PASSED!

!testRun: #PortfolioTest #test05 stamp: 'bi 5/22/2021 16:01:01'!
PASSED!

!testRun: #PortfolioTest #test05 stamp: 'bi 5/22/2021 16:01:15'!
PASSED!

!testRun: #PortfolioTest #test01PortfolioHaveZeroAsBalanceWhenCreated stamp: 'bi 5/22/2021 16:01:15'!
PASSED!

!testRun: #PortfolioTest #test02AccountIncreasesPortfolioBalanceValueOfYourTransactions stamp: 'bi 5/22/2021 16:01:15'!
PASSED!

!testRun: #PortfolioTest #test03PortfolioKnowsRegisteredTransactionsOfYourAccounts stamp: 'bi 5/22/2021 16:01:15'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioDoNotKnowNotRegisteredTransactionsOfYourAccounts stamp: 'bi 5/22/2021 16:01:15'!
PASSED!

!testRun: #PortfolioTest #test05 stamp: 'bi 5/22/2021 16:01:15'!
PASSED!

----QUIT----(22 May 2021 16:02:01) CuisUniversity-4532.image priorSource: 17034948!

----STARTUP---- (22 May 2021 16:02:07) as /home/bingani/Documentos/Ing 1/PRACTICAS/inge1-ejercicios-1C2021/05-Portfolio 1/Implementacion/CuisUniversity-4532.image!


!testRun: #PortfolioTest #test05 stamp: 'bi 5/22/2021 16:03:17'!
PASSED!

!testRun: #PortfolioTest #test01PortfolioHaveZeroAsBalanceWhenCreated stamp: 'bi 5/22/2021 16:03:17'!
PASSED!

!testRun: #PortfolioTest #test02AccountIncreasesPortfolioBalanceValueOfYourTransactions stamp: 'bi 5/22/2021 16:03:17'!
PASSED!

!testRun: #PortfolioTest #test03PortfolioKnowsRegisteredTransactionsOfYourAccounts stamp: 'bi 5/22/2021 16:03:17'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioDoNotKnowNotRegisteredTransactionsOfYourAccounts stamp: 'bi 5/22/2021 16:03:17'!
PASSED!

!testRun: #PortfolioTest #test05 stamp: 'bi 5/22/2021 16:03:17'!
PASSED!
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'bi 5/22/2021 16:08:02' prior: 50864354!
test05

	| portfolioIn portfolioOut account |
	
"	account := ReceptiveAccount  new.
	Deposit register: 100 on: account."

	portfolioIn := Portfolio new.
	portfolioIn register: account.
	
	portfolioOut := Portfolio new.
	portfolioOut register: portfolioIn.
	
	self assert: 0 equals: portfolioIn balance.
	self assert: 0 equals: portfolioOut balance.

"	self assert: 100 equals: portfolioIn balance.
	self assert: 100 equals: portfolioOut balance."

! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'bi 5/22/2021 16:08:25' prior: 50864553!
test05

	| portfolioIn portfolioOut |
	
"	account := ReceptiveAccount  new.
	Deposit register: 100 on: account."

	portfolioIn := Portfolio new.
"	portfolioIn register: account."
	
	portfolioOut := Portfolio new.
	portfolioOut register: portfolioIn.
	
	self assert: 0 equals: portfolioIn balance.
	self assert: 0 equals: portfolioOut balance.

"	self assert: 100 equals: portfolioIn balance.
	self assert: 100 equals: portfolioOut balance."

! !

!testRun: #PortfolioTest #test05 stamp: 'bi 5/22/2021 16:08:29'!
PASSED!

!testRun: #PortfolioTest #test01PortfolioHaveZeroAsBalanceWhenCreated stamp: 'bi 5/22/2021 16:08:29'!
PASSED!

!testRun: #PortfolioTest #test02AccountIncreasesPortfolioBalanceValueOfYourTransactions stamp: 'bi 5/22/2021 16:08:29'!
PASSED!

!testRun: #PortfolioTest #test03PortfolioKnowsRegisteredTransactionsOfYourAccounts stamp: 'bi 5/22/2021 16:08:29'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioDoNotKnowNotRegisteredTransactionsOfYourAccounts stamp: 'bi 5/22/2021 16:08:29'!
PASSED!

!testRun: #PortfolioTest #test05 stamp: 'bi 5/22/2021 16:08:29'!
PASSED!
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'bi 5/22/2021 16:10:36' prior: 50864571!
test05

	| portfolioIn portfolioOut account1 account2 |
	
	account1 := ReceptiveAccount  new.
	Deposit register: 100 on: account1.

	account2 := ReceptiveAccount  new.
	Deposit register: 50 on: account2.

	portfolioIn := Portfolio new.
	portfolioIn register: account1.
	
	portfolioOut := Portfolio new.
	portfolioOut register: portfolioIn.
	portfolioOut register: account2.
	
	self assert: 100 equals: portfolioIn balance.
	self assert: 150 equals: portfolioOut balance.

! !

!testRun: #PortfolioTest #test05 stamp: 'bi 5/22/2021 16:10:43'!
PASSED!

!testRun: #PortfolioTest #test01PortfolioHaveZeroAsBalanceWhenCreated stamp: 'bi 5/22/2021 16:10:43'!
PASSED!

!testRun: #PortfolioTest #test02AccountIncreasesPortfolioBalanceValueOfYourTransactions stamp: 'bi 5/22/2021 16:10:43'!
PASSED!

!testRun: #PortfolioTest #test03PortfolioKnowsRegisteredTransactionsOfYourAccounts stamp: 'bi 5/22/2021 16:10:43'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioDoNotKnowNotRegisteredTransactionsOfYourAccounts stamp: 'bi 5/22/2021 16:10:43'!
PASSED!

!testRun: #PortfolioTest #test05 stamp: 'bi 5/22/2021 16:10:43'!
PASSED!
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'bi 5/22/2021 16:11:04' prior: 50864609!
test05

	| portfolioIn portfolioOut account1 account2 |
"COMO HACERLO FALLAR?"	
	account1 := ReceptiveAccount  new.
	Deposit register: 100 on: account1.

	account2 := ReceptiveAccount  new.
	Deposit register: 50 on: account2.

	portfolioIn := Portfolio new.
	portfolioIn register: account1.
	
	portfolioOut := Portfolio new.
	portfolioOut register: portfolioIn.
	portfolioOut register: account2.
	
	self assert: 100 equals: portfolioIn balance.
	self assert: 150 equals: portfolioOut balance.

! !

----QUIT----(22 May 2021 16:11:25) CuisUniversity-4532.image priorSource: 17051943!

----STARTUP---- (22 May 2021 18:17:44) as /home/bingani/Documentos/Ing 1/PRACTICAS/inge1-ejercicios-1C2021/05-Portfolio 1/Implementacion/CuisUniversity-4532.image!

!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'bi 5/22/2021 18:28:24' prior: 50864647!
test05

	| portfolioIn portfolioOut account1 account2 |

	account1 := ReceptiveAccount  new.
	Deposit register: 100 on: account1.

	account2 := ReceptiveAccount  new.
	Deposit register: 50 on: account2.

	portfolioIn := Portfolio new.
	portfolioIn register: account1.
	
	portfolioOut := Portfolio new.
	portfolioOut register: portfolioIn.
	portfolioOut register: account2.
	
	self assert: 100 equals: portfolioIn balance.
	self assert: 150 equals: portfolioOut balance.

! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'bi 5/22/2021 18:32:37' prior: 50864674!
test05

	| portfolioIn portfolioOut account1 account2 |

	account1 := ReceptiveAccount  new.
	Deposit register: 100 on: account1.
	Deposit register: 50 on: account1.

	account2 := ReceptiveAccount  new.
	Deposit register: 50 on: account2.

	portfolioIn := Portfolio new.
	portfolioIn register: account1.
	
	portfolioOut := Portfolio new.
	portfolioOut register: portfolioIn.
	portfolioOut register: account2.
	
	self assert: 150 equals: portfolioIn balance.
	self assert: 200 equals: portfolioOut balance.

! !

!testRun: #PortfolioTest #test05 stamp: 'bi 5/22/2021 18:32:38'!
PASSED!

!testRun: #PortfolioTest #test01PortfolioHaveZeroAsBalanceWhenCreated stamp: 'bi 5/22/2021 18:32:38'!
PASSED!

!testRun: #PortfolioTest #test02AccountIncreasesPortfolioBalanceValueOfYourTransactions stamp: 'bi 5/22/2021 18:32:38'!
PASSED!

!testRun: #PortfolioTest #test03PortfolioKnowsRegisteredTransactionsOfYourAccounts stamp: 'bi 5/22/2021 18:32:38'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioDoNotKnowNotRegisteredTransactionsOfYourAccounts stamp: 'bi 5/22/2021 18:32:38'!
PASSED!

!testRun: #PortfolioTest #test05 stamp: 'bi 5/22/2021 18:32:38'!
PASSED!
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'bi 5/22/2021 18:36:01' prior: 50864692!
test05

	| portfolioIn portfolioOut account1 account2 deposit |

	account1 := ReceptiveAccount  new.
	Deposit register: 100 on: account1.
	deposit := Deposit register: 50 on: account1.

	account2 := ReceptiveAccount  new.
	Deposit register: 50 on: account2.

	portfolioIn := Portfolio new.
	portfolioIn register: account1.
	
	portfolioOut := Portfolio new.
	portfolioOut register: portfolioIn.
	portfolioOut register: account2.
	
	self assert: 150 equals: portfolioIn balance.
	self assert: 200 equals: portfolioOut balance.
	self assert: (portfolioOut hasRegistered: deposit).	
! !

!testRun: #PortfolioTest #test05 stamp: 'bi 5/22/2021 18:36:04'!
PASSED!

!testRun: #PortfolioTest #test01PortfolioHaveZeroAsBalanceWhenCreated stamp: 'bi 5/22/2021 18:36:04'!
PASSED!

!testRun: #PortfolioTest #test02AccountIncreasesPortfolioBalanceValueOfYourTransactions stamp: 'bi 5/22/2021 18:36:04'!
PASSED!

!testRun: #PortfolioTest #test03PortfolioKnowsRegisteredTransactionsOfYourAccounts stamp: 'bi 5/22/2021 18:36:04'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioDoNotKnowNotRegisteredTransactionsOfYourAccounts stamp: 'bi 5/22/2021 18:36:04'!
PASSED!

!testRun: #PortfolioTest #test05 stamp: 'bi 5/22/2021 18:36:04'!
PASSED!
!Portfolio methodsFor: 'as yet unclassified' stamp: 'bi 5/22/2021 18:40:09'!
registerAccount: anAccount

	accounts add: anAccount 

	! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'bi 5/22/2021 18:40:29' prior: 50864307!
test02AccountIncreasesPortfolioBalanceValueOfYourTransactions

	| portfolio account |
	
	account := ReceptiveAccount  new.
	Deposit register: 100 on: account.

	portfolio := Portfolio new.
	portfolio registerAccount: account.

	self assert: 100 equals: portfolio balance.! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'bi 5/22/2021 18:40:43' prior: 50864221!
test03PortfolioKnowsRegisteredTransactionsOfYourAccounts

	| account deposit withdraw portfolio |
	
	account := ReceptiveAccount new.
	deposit := Deposit register: 100 on: account.
	withdraw := Withdraw register: 50 on: account.
	
	portfolio := Portfolio new.
	portfolio registerAccount: account.
		
	self assert: (portfolio hasRegistered: deposit).	
	self assert: (portfolio hasRegistered: withdraw).! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'bi 5/22/2021 18:40:50' prior: 50864276!
test04PortfolioDoNotKnowNotRegisteredTransactionsOfYourAccounts

	| account deposit withdraw portfolio |
	
	account := ReceptiveAccount new.
	deposit := Deposit register: 100 on: account.
	withdraw := Withdraw for: 50.
	
	portfolio := Portfolio new.
	portfolio registerAccount: account.
		
	self assert: (portfolio hasRegistered: deposit).	
	self deny: (portfolio hasRegistered: withdraw).! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'bi 5/22/2021 18:41:43' prior: 50864732!
test05

	| portfolioIn portfolioOut account1 account2 |

	account1 := ReceptiveAccount  new.
	Deposit register: 100 on: account1.
	Deposit register: 50 on: account1.

	account2 := ReceptiveAccount  new.
	Deposit register: 50 on: account2.

	portfolioIn := Portfolio new.
	portfolioIn registerAccount: account1.
	
	portfolioOut := Portfolio new.
	portfolioOut registerPorfolio: portfolioIn.
	portfolioOut registerAccount: account2.
	
	self assert: 150 equals: portfolioIn balance.
	self assert: 200 equals: portfolioOut balance.
! !

!testRun: #PortfolioTest #test05 stamp: 'bi 5/22/2021 18:44:57'!
ERROR!

!methodRemoval: Portfolio #register: stamp: 'bi 5/22/2021 18:45:10'!
register: anAccount

	accounts add: anAccount 

	!

!classDefinition: #Portfolio category: 'Portfolio-Ejercicio' stamp: 'bi 5/22/2021 18:45:55'!
Object subclass: #Portfolio
	instanceVariableNames: 'accounts portfolios'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!
!Portfolio methodsFor: 'as yet unclassified' stamp: 'bi 5/22/2021 18:45:46'!
registerPorfolio: anPortfolio

	portfolios add: anPortfolio 

	! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'bi 5/22/2021 18:46:15' prior: 50863232 overrides: 16896425!
initialize

	accounts := OrderedCollection new.
	portfolios := OrderedCollection new.! !

!testRun: #PortfolioTest #test05 stamp: 'bi 5/22/2021 18:46:28'!
FAILURE!
!Portfolio methodsFor: 'as yet unclassified' stamp: 'bi 5/22/2021 18:48:45' prior: 50863852!
balance

	^ (portfolios sum: [ :aPortfolio | aPortfolio balance ] ifEmpty: [ 0 ])
	+ (accounts sum: [ :anAccount | anAccount balance ] ifEmpty: [ 0 ])! !

!testRun: #PortfolioTest #test01PortfolioHaveZeroAsBalanceWhenCreated stamp: 'bi 5/22/2021 18:48:51'!
PASSED!

!testRun: #PortfolioTest #test02AccountIncreasesPortfolioBalanceValueOfYourTransactions stamp: 'bi 5/22/2021 18:48:51'!
PASSED!

!testRun: #PortfolioTest #test03PortfolioKnowsRegisteredTransactionsOfYourAccounts stamp: 'bi 5/22/2021 18:48:51'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioDoNotKnowNotRegisteredTransactionsOfYourAccounts stamp: 'bi 5/22/2021 18:48:51'!
PASSED!

!testRun: #PortfolioTest #test05 stamp: 'bi 5/22/2021 18:48:51'!
PASSED!
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'bi 5/22/2021 18:50:23'!
test06

	| portfolioIn portfolioOut account1 account2 |

	account1 := ReceptiveAccount  new.
	Deposit register: 100 on: account1.
	Deposit register: 50 on: account1.

	account2 := ReceptiveAccount  new.
	Deposit register: 50 on: account2.

	portfolioIn := Portfolio new.
	portfolioIn registerAccount: account1.
	
	portfolioOut := Portfolio new.
	portfolioOut registerPorfolio: portfolioIn.
	portfolioOut registerAccount: account2.
	
	self assert: 150 equals: portfolioIn balance.
	self assert: 200 equals: portfolioOut balance.
""! !

!classDefinition: #PortfolioTest category: 'Portfolio-Ejercicio' stamp: 'bi 5/22/2021 18:52:33'!
TestCase subclass: #PortfolioTest
	instanceVariableNames: 'depositIn'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'bi 5/22/2021 18:52:31' prior: 50864896!
test06

	| portfolioIn portfolioOut account1 account2 depositOut |

	account1 := ReceptiveAccount  new.
	Deposit register: 100 on: account1.
	depositIn := Deposit register: 50 on: account1.

	portfolioIn := Portfolio new.
	portfolioIn registerAccount: account1.

	account2 := ReceptiveAccount  new.
	depositOut := Deposit register: 50 on: account2.
	
	portfolioOut := Portfolio new.
	portfolioOut registerPorfolio: portfolioIn.
	portfolioOut registerAccount: account2.
	
	self assert: 150 equals: portfolioIn balance.
	self assert: 200 equals: portfolioOut balance.

"	account := ReceptiveAccount new.
	deposit := Deposit register: 100 on: account.
	withdraw := Withdraw register: 50 on: account.
	
	portfolio := Portfolio new.
	portfolio registerAccount: account.
		
	self assert: (portfolio hasRegistered: deposit).	
	self assert: (portfolio hasRegistered: withdraw)."! !

TestCase subclass: #PortfolioTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

!classDefinition: #PortfolioTest category: 'Portfolio-Ejercicio' stamp: 'bi 5/22/2021 18:52:44'!
TestCase subclass: #PortfolioTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'bi 5/22/2021 18:53:00' prior: 50864924!
test06

	| portfolioIn portfolioOut account1 account2 depositIn depositOut |

	account1 := ReceptiveAccount  new.
	Deposit register: 100 on: account1.
	depositIn := Deposit register: 50 on: account1.

	portfolioIn := Portfolio new.
	portfolioIn registerAccount: account1.

	account2 := ReceptiveAccount  new.
	depositOut := Deposit register: 50 on: account2.
	
	portfolioOut := Portfolio new.
	portfolioOut registerPorfolio: portfolioIn.
	portfolioOut registerAccount: account2.
	
	self assert: 150 equals: portfolioIn balance.
	self assert: 200 equals: portfolioOut balance.

"	account := ReceptiveAccount new.
	deposit := Deposit register: 100 on: account.
	withdraw := Withdraw register: 50 on: account.
	
	portfolio := Portfolio new.
	portfolio registerAccount: account.
		
	self assert: (portfolio hasRegistered: deposit).	
	self assert: (portfolio hasRegistered: withdraw)."! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'bi 5/22/2021 18:53:35' prior: 50864822!
test05

	| portfolioIn portfolioOut account1 account2 |

	account1 := ReceptiveAccount  new.
	Deposit register: 100 on: account1.
	Deposit register: 50 on: account1.

	portfolioIn := Portfolio new.
	portfolioIn registerAccount: account1.

	account2 := ReceptiveAccount  new.
	Deposit register: 50 on: account2.
	
	portfolioOut := Portfolio new.
	portfolioOut registerPorfolio: portfolioIn.
	portfolioOut registerAccount: account2.
	
	self assert: 150 equals: portfolioIn balance.
	self assert: 200 equals: portfolioOut balance.
! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'bi 5/22/2021 18:54:39' prior: 50864967!
test06

	| portfolioIn portfolioOut account1 account2 depositIn depositOut |

	account1 := ReceptiveAccount  new.
	Deposit register: 100 on: account1.
	depositIn := Deposit register: 50 on: account1.

	portfolioIn := Portfolio new.
	portfolioIn registerAccount: account1.

	account2 := ReceptiveAccount  new.
	depositOut := Deposit register: 50 on: account2.
	
	portfolioOut := Portfolio new.
	portfolioOut registerPorfolio: portfolioIn.
	portfolioOut registerAccount: account2.
	
	self assert: (portfolioOut hasRegistered: depositOut).	
	self assert: (portfolioOut hasRegistered: depositIn).

"	account := ReceptiveAccount new.
	deposit := Deposit register: 100 on: account.
	withdraw := Withdraw register: 50 on: account.
	
	portfolio := Portfolio new.
	portfolio registerAccount: account.
		
	self assert: (portfolio hasRegistered: deposit).	
	self assert: (portfolio hasRegistered: withdraw)."! !

!testRun: #PortfolioTest #test06 stamp: 'bi 5/22/2021 18:54:51'!
FAILURE!
!Portfolio methodsFor: 'as yet unclassified' stamp: 'bi 5/22/2021 18:56:11' prior: 50864203!
hasRegistered: aTransaction

	^ (portfolios anySatisfy: [:aPortolio | aPortolio hasRegistered: aTransaction ])
	or: (accounts anySatisfy: [:anAccount | anAccount hasRegistered: aTransaction ]).! !

!testRun: #PortfolioTest #test01PortfolioHaveZeroAsBalanceWhenCreated stamp: 'bi 5/22/2021 18:56:13'!
PASSED!

!testRun: #PortfolioTest #test02AccountIncreasesPortfolioBalanceValueOfYourTransactions stamp: 'bi 5/22/2021 18:56:13'!
PASSED!

!testRun: #PortfolioTest #test03PortfolioKnowsRegisteredTransactionsOfYourAccounts stamp: 'bi 5/22/2021 18:56:13'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioDoNotKnowNotRegisteredTransactionsOfYourAccounts stamp: 'bi 5/22/2021 18:56:13'!
PASSED!

!testRun: #PortfolioTest #test05 stamp: 'bi 5/22/2021 18:56:13'!
PASSED!

!testRun: #PortfolioTest #test06 stamp: 'bi 5/22/2021 18:56:13'!
PASSED!
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'bi 5/22/2021 19:16:41'!
test02AccountBalanceIncreasesPortfolioBalanceInTheValueOfAccountTransactions

	| portfolio account |
	
	account := ReceptiveAccount  new.
	Deposit register: 100 on: account.

	portfolio := Portfolio new.
	portfolio registerAccount: account.

	self assert: 100 equals: portfolio balance.! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'bi 5/22/2021 19:22:11'!
test02AccountBalanceIncreasesPortfolioBalanceInTheValueOfYourTransactions

	| portfolio account |
	
	account := ReceptiveAccount  new.
	Deposit register: 100 on: account.

	portfolio := Portfolio new.
	portfolio registerAccount: account.

	self assert: 100 equals: portfolio balance.! !

!methodRemoval: PortfolioTest #test02AccountBalanceIncreasesPortfolioBalanceInTheValueOfAccountTransactions stamp: 'bi 5/22/2021 19:22:16'!
test02AccountBalanceIncreasesPortfolioBalanceInTheValueOfAccountTransactions

	| portfolio account |
	
	account := ReceptiveAccount  new.
	Deposit register: 100 on: account.

	portfolio := Portfolio new.
	portfolio registerAccount: account.

	self assert: 100 equals: portfolio balance.!

!methodRemoval: PortfolioTest #test02AccountBalanceIncreasesPortfolioBalanceInTheValueOfYourTransactions stamp: 'bi 5/22/2021 19:22:21'!
test02AccountBalanceIncreasesPortfolioBalanceInTheValueOfYourTransactions

	| portfolio account |
	
	account := ReceptiveAccount  new.
	Deposit register: 100 on: account.

	portfolio := Portfolio new.
	portfolio registerAccount: account.

	self assert: 100 equals: portfolio balance.!
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'bi 5/22/2021 19:24:21'!
test05AccountBalanceIncreasesPortfolioBalanceValueOfYourTransactions

	| portfolioIn portfolioOut account1 account2 |

	account1 := ReceptiveAccount  new.
	Deposit register: 100 on: account1.
	Deposit register: 50 on: account1.

	portfolioIn := Portfolio new.
	portfolioIn registerAccount: account1.

	account2 := ReceptiveAccount  new.
	Deposit register: 50 on: account2.
	
	portfolioOut := Portfolio new.
	portfolioOut registerPorfolio: portfolioIn.
	portfolioOut registerAccount: account2.
	
	self assert: 150 equals: portfolioIn balance.
	self assert: 200 equals: portfolioOut balance.
! !

!methodRemoval: PortfolioTest #test05 stamp: 'bi 5/22/2021 19:24:24'!
test05

	| portfolioIn portfolioOut account1 account2 |

	account1 := ReceptiveAccount  new.
	Deposit register: 100 on: account1.
	Deposit register: 50 on: account1.

	portfolioIn := Portfolio new.
	portfolioIn registerAccount: account1.

	account2 := ReceptiveAccount  new.
	Deposit register: 50 on: account2.
	
	portfolioOut := Portfolio new.
	portfolioOut registerPorfolio: portfolioIn.
	portfolioOut registerAccount: account2.
	
	self assert: 150 equals: portfolioIn balance.
	self assert: 200 equals: portfolioOut balance.
!
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'bi 5/22/2021 19:25:37' prior: 50865018!
test06

	| portfolioIn portfolioOut account1 account2 depositIn depositOut |

	account1 := ReceptiveAccount  new.
	Deposit register: 100 on: account1.
	depositIn := Deposit register: 50 on: account1.

	portfolioIn := Portfolio new.
	portfolioIn registerAccount: account1.

	account2 := ReceptiveAccount  new.
	depositOut := Deposit register: 50 on: account2.
	
	portfolioOut := Portfolio new.
	portfolioOut registerPorfolio: portfolioIn.
	portfolioOut registerAccount: account2.
	
	self assert: (portfolioOut hasRegistered: depositOut).	
	self assert: (portfolioOut hasRegistered: depositIn).
! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'bi 5/22/2021 19:27:24'!
test06PortfolioKnowsRegisteredTransactionsOfYourAccountsAndYourPortfolios

	| portfolioIn portfolioOut account1 account2 depositIn depositOut |

	account1 := ReceptiveAccount  new.
	Deposit register: 100 on: account1.
	depositIn := Deposit register: 50 on: account1.

	portfolioIn := Portfolio new.
	portfolioIn registerAccount: account1.

	account2 := ReceptiveAccount  new.
	depositOut := Deposit register: 50 on: account2.
	
	portfolioOut := Portfolio new.
	portfolioOut registerPorfolio: portfolioIn.
	portfolioOut registerAccount: account2.
	
	self assert: (portfolioOut hasRegistered: depositOut).	
	self assert: (portfolioOut hasRegistered: depositIn).
! !

!methodRemoval: PortfolioTest #test06 stamp: 'bi 5/22/2021 19:27:24'!
test06

	| portfolioIn portfolioOut account1 account2 depositIn depositOut |

	account1 := ReceptiveAccount  new.
	Deposit register: 100 on: account1.
	depositIn := Deposit register: 50 on: account1.

	portfolioIn := Portfolio new.
	portfolioIn registerAccount: account1.

	account2 := ReceptiveAccount  new.
	depositOut := Deposit register: 50 on: account2.
	
	portfolioOut := Portfolio new.
	portfolioOut registerPorfolio: portfolioIn.
	portfolioOut registerAccount: account2.
	
	self assert: (portfolioOut hasRegistered: depositOut).	
	self assert: (portfolioOut hasRegistered: depositIn).
!

!testRun: #PortfolioTest #test06PortfolioKnowsRegisteredTransactionsOfYourAccountsAndYourPortfolios stamp: 'bi 5/22/2021 19:27:38'!
PASSED!

!testRun: #PortfolioTest #test01PortfolioHaveZeroAsBalanceWhenCreated stamp: 'bi 5/22/2021 19:27:38'!
PASSED!

!testRun: #PortfolioTest #test02AccountIncreasesPortfolioBalanceValueOfYourTransactions stamp: 'bi 5/22/2021 19:27:38'!
PASSED!

!testRun: #PortfolioTest #test03PortfolioKnowsRegisteredTransactionsOfYourAccounts stamp: 'bi 5/22/2021 19:27:38'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioDoNotKnowNotRegisteredTransactionsOfYourAccounts stamp: 'bi 5/22/2021 19:27:38'!
PASSED!

!testRun: #PortfolioTest #test05AccountBalanceIncreasesPortfolioBalanceValueOfYourTransactions stamp: 'bi 5/22/2021 19:27:38'!
PASSED!

!testRun: #PortfolioTest #test06PortfolioKnowsRegisteredTransactionsOfYourAccountsAndYourPortfolios stamp: 'bi 5/22/2021 19:27:38'!
PASSED!

----QUIT----(22 May 2021 19:47:15) CuisUniversity-4532.image priorSource: 17056465!

----STARTUP---- (22 May 2021 19:48:18) as /home/bingani/Documentos/Ing 1/PRACTICAS/inge1-ejercicios-1C2021/05-Portfolio 1/Implementacion/CuisUniversity-4532.image!


Object subclass: #FinancialAsset
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

!classDefinition: #FinancialAsset category: 'Portfolio-Ejercicio' stamp: 'bi 5/22/2021 19:49:00'!
Object subclass: #FinancialAsset
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

FinancialAsset subclass: #Portfolio
	instanceVariableNames: 'accounts portfolios'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

!classDefinition: #Portfolio category: 'Portfolio-Ejercicio' stamp: 'bi 5/22/2021 19:49:21'!
FinancialAsset subclass: #Portfolio
	instanceVariableNames: 'accounts portfolios'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

FinancialAsset subclass: #ReceptiveAccount
	instanceVariableNames: 'transactions'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

!classDefinition: #ReceptiveAccount category: 'Portfolio-Ejercicio' stamp: 'bi 5/22/2021 19:49:26'!
FinancialAsset subclass: #ReceptiveAccount
	instanceVariableNames: 'transactions'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

FinancialAsset subclass: #Portfolio
	instanceVariableNames: 'financialAsset'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

!classDefinition: #Portfolio category: 'Portfolio-Ejercicio' stamp: 'bi 5/22/2021 19:51:20'!
FinancialAsset subclass: #Portfolio
	instanceVariableNames: 'financialAsset'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

FinancialAsset subclass: #Portfolio
	instanceVariableNames: 'financialAssets'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

!classDefinition: #Portfolio category: 'Portfolio-Ejercicio' stamp: 'bi 5/22/2021 20:03:23'!
FinancialAsset subclass: #Portfolio
	instanceVariableNames: 'financialAssets'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!
!Portfolio methodsFor: 'as yet unclassified' stamp: 'bi 5/22/2021 20:04:20'!
register: aFinancialAsset

	financialAssets add: aFinancialAsset 

	! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'bi 5/22/2021 20:04:48' prior: 50865340!
register: aFinancialAsset

	financialAssets add: aFinancialAsset

	! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'bi 5/22/2021 20:06:07' prior: 50864861 overrides: 16896425!
initialize

	financialAssets := FinancialAsset new.
	"accounts := OrderedCollection new.
	portfolios := OrderedCollection new."! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'bi 5/22/2021 20:21:00' prior: 50865352 overrides: 16896425!
initialize

	financialAssets := OrderedCollection new.
	"accounts := OrderedCollection new.
	portfolios := OrderedCollection new."! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'bi 5/22/2021 20:22:35' prior: 50864870!
balance

	^financialAssets sum: [ :aFinnalAsset | aFinnalAsset balance ] ifEmpty: [ 0 ]! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'bi 5/22/2021 20:22:53' prior: 50865368!
balance

	^financialAssets sum: [ :aFinnalAsset | aFinnalAsset balance ] ifEmpty: [ 0 ]
	"^ (portfolios sum: [ :aPortfolio | aPortfolio balance ] ifEmpty: [ 0 ])
	+ (accounts sum: [ :anAccount | anAccount balance ] ifEmpty: [ 0 ])"! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'bi 5/22/2021 20:23:51' prior: 50865052!
hasRegistered: aTransaction

	^financialAssets anySatisfy: [:aFinancialAsset | aFinancialAsset hasRegistered: aTransaction ]
	"^ (portfolios anySatisfy: [:aPortolio | aPortolio hasRegistered: aTransaction ])
	or: (accounts anySatisfy: [:anAccount | anAccount hasRegistered: aTransaction ])."! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'bi 5/22/2021 20:24:01' prior: 50865374!
balance

	^financialAssets sum: [ :aFinancialAsset | aFinancialAsset balance ] ifEmpty: [ 0 ]
	"^ (portfolios sum: [ :aPortfolio | aPortfolio balance ] ifEmpty: [ 0 ])
	+ (accounts sum: [ :anAccount | anAccount balance ] ifEmpty: [ 0 ])"! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'bi 5/22/2021 20:24:58' prior: 50864778!
test02AccountIncreasesPortfolioBalanceValueOfYourTransactions

	| portfolio account |
	
	account := ReceptiveAccount  new.
	Deposit register: 100 on: account.

	portfolio := Portfolio new.
	portfolio register: account.
	"portfolio registerAccount: account."

	self assert: 100 equals: portfolio balance.! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'bi 5/22/2021 20:25:19' prior: 50864790!
test03PortfolioKnowsRegisteredTransactionsOfYourAccounts

	| account deposit withdraw portfolio |
	
	account := ReceptiveAccount new.
	deposit := Deposit register: 100 on: account.
	withdraw := Withdraw register: 50 on: account.
	
	portfolio := Portfolio new.
	portfolio register: account.
	"portfolio registerAccount: account."
		
	self assert: (portfolio hasRegistered: deposit).	
	self assert: (portfolio hasRegistered: withdraw).! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'bi 5/22/2021 20:25:38' prior: 50864806!
test04PortfolioDoNotKnowNotRegisteredTransactionsOfYourAccounts

	| account deposit withdraw portfolio |
	
	account := ReceptiveAccount new.
	deposit := Deposit register: 100 on: account.
	withdraw := Withdraw for: 50.
	
	portfolio := Portfolio new.
	portfolio register: account.
	"portfolio registerAccount: account."
		
	self assert: (portfolio hasRegistered: deposit).	
	self deny: (portfolio hasRegistered: withdraw).! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'bi 5/22/2021 20:26:23' prior: 50865132!
test05AccountBalanceIncreasesPortfolioBalanceValueOfYourTransactions

	| portfolioIn portfolioOut account1 account2 |

	account1 := ReceptiveAccount  new.
	Deposit register: 100 on: account1.
	Deposit register: 50 on: account1.

	portfolioIn := Portfolio new.
	portfolioIn register: account1.
	"portfolioIn registerAccount: account1."

	account2 := ReceptiveAccount  new.
	Deposit register: 50 on: account2.
	
	portfolioOut := Portfolio new.
	portfolioOut register: portfolioIn.
	portfolioOut register: account2.
	"portfolioOut registerPorfolio: portfolioIn.
	portfolioOut registerAccount: account2."
	
	self assert: 150 equals: portfolioIn balance.
	self assert: 200 equals: portfolioOut balance.
! !

!testRun: #PortfolioTest #test05AccountBalanceIncreasesPortfolioBalanceValueOfYourTransactions stamp: 'bi 5/22/2021 20:26:25'!
PASSED!

!testRun: #PortfolioTest #test01PortfolioHaveZeroAsBalanceWhenCreated stamp: 'bi 5/22/2021 20:26:25'!
PASSED!

!testRun: #PortfolioTest #test02AccountIncreasesPortfolioBalanceValueOfYourTransactions stamp: 'bi 5/22/2021 20:26:25'!
PASSED!

!testRun: #PortfolioTest #test03PortfolioKnowsRegisteredTransactionsOfYourAccounts stamp: 'bi 5/22/2021 20:26:25'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioDoNotKnowNotRegisteredTransactionsOfYourAccounts stamp: 'bi 5/22/2021 20:26:25'!
PASSED!

!testRun: #PortfolioTest #test05AccountBalanceIncreasesPortfolioBalanceValueOfYourTransactions stamp: 'bi 5/22/2021 20:26:25'!
PASSED!

!testRun: #PortfolioTest #test06PortfolioKnowsRegisteredTransactionsOfYourAccountsAndYourPortfolios stamp: 'bi 5/22/2021 20:26:25'!
ERROR!

!testRun: #PortfolioTest #test06PortfolioKnowsRegisteredTransactionsOfYourAccountsAndYourPortfolios stamp: 'bi 5/22/2021 20:26:25'!
ERROR!
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'bi 5/22/2021 20:26:44' prior: 50865195!
test06PortfolioKnowsRegisteredTransactionsOfYourAccountsAndYourPortfolios

	| portfolioIn portfolioOut account1 account2 depositIn depositOut |

	account1 := ReceptiveAccount  new.
	Deposit register: 100 on: account1.
	depositIn := Deposit register: 50 on: account1.

	portfolioIn := Portfolio new.
	portfolioIn register: account1.
	"portfolioIn registerAccount: account1."

	account2 := ReceptiveAccount  new.
	depositOut := Deposit register: 50 on: account2.
	
	portfolioOut := Portfolio new.
	portfolioOut registerPorfolio: portfolioIn.
	portfolioOut registerAccount: account2.
	
	self assert: (portfolioOut hasRegistered: depositOut).	
	self assert: (portfolioOut hasRegistered: depositIn).
! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'bi 5/22/2021 20:27:00' prior: 50865514!
test06PortfolioKnowsRegisteredTransactionsOfYourAccountsAndYourPortfolios

	| portfolioIn portfolioOut account1 account2 depositIn depositOut |

	account1 := ReceptiveAccount  new.
	Deposit register: 100 on: account1.
	depositIn := Deposit register: 50 on: account1.

	portfolioIn := Portfolio new.
	portfolioIn register: account1.
	"portfolioIn registerAccount: account1."

	account2 := ReceptiveAccount  new.
	depositOut := Deposit register: 50 on: account2.
	
	portfolioOut := Portfolio new.
	portfolioOut register: portfolioIn.
	portfolioOut register: account2.
	"portfolioOut registerPorfolio: portfolioIn.
	portfolioOut registerAccount: account2."
	
	self assert: (portfolioOut hasRegistered: depositOut).	
	self assert: (portfolioOut hasRegistered: depositIn).
! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'bi 5/22/2021 20:27:07' prior: 50865539!
test06PortfolioKnowsRegisteredTransactionsOfYourAccountsAndYourPortfolios

	| portfolioIn portfolioOut account1 account2 depositIn depositOut |

	account1 := ReceptiveAccount  new.
	Deposit register: 100 on: account1.
	depositIn := Deposit register: 50 on: account1.

	portfolioIn := Portfolio new.
	portfolioIn register: account1.
	"portfolioIn registerAccount: account1."

	account2 := ReceptiveAccount  new.
	depositOut := Deposit register: 50 on: account2.
	
	portfolioOut := Portfolio new.
	portfolioOut register: portfolioIn.
	portfolioOut register: account2.
	"portfolioOut registerPorfolio: portfolioIn.
	portfolioOut registerAccount: account2."
	
	self assert: (portfolioOut hasRegistered: depositOut).	
	self assert: (portfolioOut hasRegistered: depositIn).
! !

!testRun: #PortfolioTest #test06PortfolioKnowsRegisteredTransactionsOfYourAccountsAndYourPortfolios stamp: 'bi 5/22/2021 20:27:13'!
PASSED!

!testRun: #PortfolioTest #test01PortfolioHaveZeroAsBalanceWhenCreated stamp: 'bi 5/22/2021 20:27:13'!
PASSED!

!testRun: #PortfolioTest #test02AccountIncreasesPortfolioBalanceValueOfYourTransactions stamp: 'bi 5/22/2021 20:27:13'!
PASSED!

!testRun: #PortfolioTest #test03PortfolioKnowsRegisteredTransactionsOfYourAccounts stamp: 'bi 5/22/2021 20:27:13'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioDoNotKnowNotRegisteredTransactionsOfYourAccounts stamp: 'bi 5/22/2021 20:27:13'!
PASSED!

!testRun: #PortfolioTest #test05AccountBalanceIncreasesPortfolioBalanceValueOfYourTransactions stamp: 'bi 5/22/2021 20:27:13'!
PASSED!

!testRun: #PortfolioTest #test06PortfolioKnowsRegisteredTransactionsOfYourAccountsAndYourPortfolios stamp: 'bi 5/22/2021 20:27:13'!
PASSED!
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'bi 5/22/2021 20:27:59' prior: 50865567!
test06PortfolioKnowsRegisteredTransactionsOfYourAccountsAndYourPortfolios

	| portfolioIn portfolioOut account1 account2 depositIn depositOut |

	account1 := ReceptiveAccount  new.
	Deposit register: 100 on: account1.
	depositIn := Deposit register: 50 on: account1.

	portfolioIn := Portfolio new.
	portfolioIn register: account1.

	account2 := ReceptiveAccount  new.
	depositOut := Deposit register: 50 on: account2.
	
	portfolioOut := Portfolio new.
	portfolioOut register: portfolioIn.
	portfolioOut register: account2.
	
	self assert: (portfolioOut hasRegistered: depositOut).	
	self assert: (portfolioOut hasRegistered: depositIn).
! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'bi 5/22/2021 20:28:09' prior: 50865456!
test05AccountBalanceIncreasesPortfolioBalanceValueOfYourTransactions

	| portfolioIn portfolioOut account1 account2 |

	account1 := ReceptiveAccount  new.
	Deposit register: 100 on: account1.
	Deposit register: 50 on: account1.

	portfolioIn := Portfolio new.
	portfolioIn register: account1.

	account2 := ReceptiveAccount  new.
	Deposit register: 50 on: account2.
	
	portfolioOut := Portfolio new.
	portfolioOut register: portfolioIn.
	portfolioOut register: account2.

	self assert: 150 equals: portfolioIn balance.
	self assert: 200 equals: portfolioOut balance.
! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'bi 5/22/2021 20:28:15' prior: 50865439!
test04PortfolioDoNotKnowNotRegisteredTransactionsOfYourAccounts

	| account deposit withdraw portfolio |
	
	account := ReceptiveAccount new.
	deposit := Deposit register: 100 on: account.
	withdraw := Withdraw for: 50.
	
	portfolio := Portfolio new.
	portfolio register: account.
		
	self assert: (portfolio hasRegistered: deposit).	
	self deny: (portfolio hasRegistered: withdraw).! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'bi 5/22/2021 20:28:21' prior: 50865422!
test03PortfolioKnowsRegisteredTransactionsOfYourAccounts

	| account deposit withdraw portfolio |
	
	account := ReceptiveAccount new.
	deposit := Deposit register: 100 on: account.
	withdraw := Withdraw register: 50 on: account.
	
	portfolio := Portfolio new.
	portfolio register: account.
		
	self assert: (portfolio hasRegistered: deposit).	
	self assert: (portfolio hasRegistered: withdraw).! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'bi 5/22/2021 20:28:27' prior: 50865409!
test02AccountIncreasesPortfolioBalanceValueOfYourTransactions

	| portfolio account |
	
	account := ReceptiveAccount  new.
	Deposit register: 100 on: account.

	portfolio := Portfolio new.
	portfolio register: account.

	self assert: 100 equals: portfolio balance.! !

!methodRemoval: Portfolio #registerPorfolio: stamp: 'bi 5/22/2021 20:28:36'!
registerPorfolio: anPortfolio

	portfolios add: anPortfolio 

	!

!methodRemoval: Portfolio #registerAccount: stamp: 'bi 5/22/2021 20:28:38'!
registerAccount: anAccount

	accounts add: anAccount 

	!
!Portfolio methodsFor: 'as yet unclassified' stamp: 'bi 5/22/2021 20:28:44' prior: 50865360 overrides: 16896425!
initialize

	financialAssets := OrderedCollection new.! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'bi 5/22/2021 20:28:50' prior: 50865385!
hasRegistered: aTransaction

	^financialAssets anySatisfy: [:aFinancialAsset | aFinancialAsset hasRegistered: aTransaction ]! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'bi 5/22/2021 20:28:57' prior: 50865398!
balance

	^financialAssets sum: [ :aFinancialAsset | aFinancialAsset balance ] ifEmpty: [ 0 ]! !

!testRun: #PortfolioTest #test01PortfolioHaveZeroAsBalanceWhenCreated stamp: 'bi 5/22/2021 20:29:01'!
PASSED!

!testRun: #PortfolioTest #test02AccountIncreasesPortfolioBalanceValueOfYourTransactions stamp: 'bi 5/22/2021 20:29:01'!
PASSED!

!testRun: #PortfolioTest #test03PortfolioKnowsRegisteredTransactionsOfYourAccounts stamp: 'bi 5/22/2021 20:29:01'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioDoNotKnowNotRegisteredTransactionsOfYourAccounts stamp: 'bi 5/22/2021 20:29:01'!
PASSED!

!testRun: #PortfolioTest #test05AccountBalanceIncreasesPortfolioBalanceValueOfYourTransactions stamp: 'bi 5/22/2021 20:29:01'!
PASSED!

!testRun: #PortfolioTest #test06PortfolioKnowsRegisteredTransactionsOfYourAccountsAndYourPortfolios stamp: 'bi 5/22/2021 20:29:01'!
PASSED!

----QUIT----(22 May 2021 20:29:17) CuisUniversity-4532.image priorSource: 17075746!

----STARTUP---- (23 May 2021 17:45:21) as /home/manuel/Facultad/Ingeniería1/Ejercicios/inge1-ejercicios-1C2021/05-Portfolio 1/Implementacion/CuisUniversity-4532.image!

!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'e d r r 5/23/2021 18:53:44'!
test07PortfolioKnowsRegisteredTransactionsOfYourAccountsAndYourPortfolios

	| portfolioIn portfolioOut account1 account2 depositIn depositOut |

	account1 := ReceptiveAccount  new.
	Deposit register: 100 on: account1.
	depositIn := Deposit register: 50 on: account1.

	portfolioIn := Portfolio new.
	portfolioIn register: account1.

	account2 := ReceptiveAccount  new.
	depositOut := Deposit register: 50 on: account2.
	
	portfolioOut := Portfolio new.
	portfolioOut register: portfolioIn.
	portfolioOut register: account2.
	
	self assert: (portfolioOut hasRegistered: depositOut).	
	self assert: (portfolioOut hasRegistered: depositIn).
! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'e d r r 5/23/2021 18:54:23' prior: 50865771!
test07PortfolioKnowsRegisteredTransactionsOfYourAccountsAndYourPortfolios

	| account1 account2 portfolio |

	account1 := ReceptiveAccount  new.
	Deposit register: 100 on: account1.
	Deposit register: 50 on: account1.
	
	account2 := ReceptiveAccount  new.
	Deposit register: 100 on: account2.
	
	portfolio := Portfolio new.
	portfolio register: account1.
	portfolio register: account2.
	
	self 
		should: [portfolio register: account2]
		raise: Error
		withExceptionDo: [ :anError | self assert: anError messageText equals: Portfolio attemptToInsertRepeatedFinancialAssetErrorDescription ].
! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'e d r r 5/23/2021 18:55:08'!
test07CannotInsertARepeatedAccountInPortfolioOfOnlyAccounts

	| account1 account2 portfolio |

	account1 := ReceptiveAccount  new.
	Deposit register: 100 on: account1.
	Deposit register: 50 on: account1.
	
	account2 := ReceptiveAccount  new.
	Deposit register: 100 on: account2.
	
	portfolio := Portfolio new.
	portfolio register: account1.
	portfolio register: account2.
	
	self 
		should: [portfolio register: account2]
		raise: Error
		withExceptionDo: [ :anError | self assert: anError messageText equals: Portfolio attemptToInsertRepeatedFinancialAssetErrorDescription ].
! !

!methodRemoval: PortfolioTest #test07PortfolioKnowsRegisteredTransactionsOfYourAccountsAndYourPortfolios stamp: 'e d r r 5/23/2021 18:55:08'!
test07PortfolioKnowsRegisteredTransactionsOfYourAccountsAndYourPortfolios

	| account1 account2 portfolio |

	account1 := ReceptiveAccount  new.
	Deposit register: 100 on: account1.
	Deposit register: 50 on: account1.
	
	account2 := ReceptiveAccount  new.
	Deposit register: 100 on: account2.
	
	portfolio := Portfolio new.
	portfolio register: account1.
	portfolio register: account2.
	
	self 
		should: [portfolio register: account2]
		raise: Error
		withExceptionDo: [ :anError | self assert: anError messageText equals: Portfolio attemptToInsertRepeatedFinancialAssetErrorDescription ].
!

!testRun: #PortfolioTest #test07CannotInsertARepeatedAccountInPortfolioOfOnlyAccounts stamp: 'e d r r 5/23/2021 18:55:32'!
FAILURE!

!testRun: #PortfolioTest #test07CannotInsertARepeatedAccountInPortfolioOfOnlyAccounts stamp: 'e d r r 5/23/2021 18:55:32'!
FAILURE!
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'e d r r 5/23/2021 18:56:00' prior: 50865817!
test07CannotInsertARepeatedAccountInPortfolioOfOnlyAccounts

	| account1 account2 portfolio |

	account1 := ReceptiveAccount  new.
	Deposit register: 100 on: account1.
	Deposit register: 50 on: account1.
	
	account2 := ReceptiveAccount  new.
	Deposit register: 200 on: account2.
	
	portfolio := Portfolio new.
	portfolio register: account1.
	portfolio register: account2.
	
	self 
		should: [portfolio register: account2]
		raise: Error
		withExceptionDo: [ :anError | self assert: anError messageText equals: Portfolio attemptToInsertRepeatedFinancialAssetErrorDescription ].
! !

!testRun: #PortfolioTest #test07CannotInsertARepeatedAccountInPortfolioOfOnlyAccounts stamp: 'e d r r 5/23/2021 18:56:04'!
FAILURE!

!testRun: #PortfolioTest #test07CannotInsertARepeatedAccountInPortfolioOfOnlyAccounts stamp: 'e d r r 5/23/2021 18:56:04'!
FAILURE!
!Portfolio class methodsFor: 'nil' stamp: 'e d r r 5/23/2021 18:56:56'!
attemptToInsertRepeatedFinancialAssetErrorDescription
	
	^'cannot insert a financial asset that is already in the portfolio'! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'e d r r 5/23/2021 18:57:09' prior: 50865346!
register: aFinancialAsset
	
	
	financialAssets add: aFinancialAsset

	! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'e d r r 5/23/2021 19:00:01' prior: 50865907!
register: aFinancialAsset
	
	self XXXXXBfsIncludes: '' ifTrue: [self error: Portfolio attemptToInsertRepeatedFinancialAssetErrorDescription ].
	financialAssets add: aFinancialAsset

	! !
!Portfolio methodsFor: 'nil' stamp: 'e d r r 5/23/2021 19:01:00'!
XXXXXBfsIncludes: yyyItem
	! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'e d r r 5/23/2021 19:02:58' prior: 50865913!
register: aFinancialAsset
	
	(self XXXXXBfsIncludes: aFinancialAsset) ifTrue: [self error: Portfolio attemptToInsertRepeatedFinancialAssetErrorDescription ].
	financialAssets add: aFinancialAsset

	! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'e d r r 5/23/2021 19:09:21' prior: 50865926!
register: aFinancialAsset
	
	(self XXXXXBfsIncludes: aFinancialAsset ZZZZZWith: '') ifTrue: [self error: Portfolio attemptToInsertRepeatedFinancialAssetErrorDescription ].
	financialAssets add: aFinancialAsset

	! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'e d r r 5/23/2021 19:10:28'!
XXXXXBfsIncludes: yyyItem yyy: ZZZZZWith 
	! !

!methodRemoval: Portfolio #XXXXXBfsIncludes: stamp: 'e d r r 5/23/2021 19:10:28'!
XXXXXBfsIncludes: yyyItem
	!
!Portfolio methodsFor: 'as yet unclassified' stamp: 'e d r r 5/23/2021 19:10:51' prior: 50865946!
XXXXXBfsIncludes: yyyItem yyy: yyyy 
	! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'e d r r 5/23/2021 19:11:16'!
XXXXXBfsIncludes: yyyItem ZZZZZWith: yyyy 
	! !

!methodRemoval: Portfolio #XXXXXBfsIncludes:yyy: stamp: 'e d r r 5/23/2021 19:11:16'!
XXXXXBfsIncludes: yyyItem yyy: yyyy 
	!
!Portfolio methodsFor: 'as yet unclassified' stamp: 'e d r r 5/23/2021 19:11:55' prior: 50865959!
XXXXXBfsIncludes: yyyItem ZZZZZWith: yyyyqueue
	! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'e d r r 5/23/2021 19:20:58' prior: 50865968!
XXXXXBfsIncludes: yyyItem ZZZZZWith: yyyyworklist
	! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'e d r r 5/23/2021 19:22:43' prior: 50865973!
XXXXXBfsIncludes: yyyItem ZZZZZWith: yyyyworklist
	
	! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'e d r r 5/23/2021 19:24:43' prior: 50865978!
XXXXXBfsIncludes: yyyItem ZZZZZWith: yyyyworklist
	
	yyyyworklist size = 0 ifTrue: [].! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'e d r r 5/23/2021 19:24:59' prior: 50865983!
XXXXXBfsIncludes: yyyItem ZZZZZWith: yyyyworklist
	
	yyyyworklist size = 0 ifTrue: [^false].
	
	! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'e d r r 5/23/2021 19:26:43' prior: 50865989!
XXXXXBfsIncludes: yyyItem ZZZZZWith: yyyyworklist
	
	|  |
	yyyyworklist size = 0 ifTrue: [^false].
	
	! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'e d r r 5/23/2021 19:27:46' prior: 50865996!
XXXXXBfsIncludes: yyyItem ZZZZZWith: yyyyworklist
	
	| aFinancialAsset |
	yyyyworklist size = 0 ifTrue: [^false].
	
	aFinancialAsset := yyyyworklist removeFirst.! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'e d r r 5/23/2021 19:27:52' prior: 50866003!
XXXXXBfsIncludes: yyyItem ZZZZZWith: yyyyworklist
	
	| aFinancialAsset |
	yyyyworklist size = 0 ifTrue: [^false].
	
	aFinancialAsset := yyyyworklist removeFirst.
	! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'e d r r 5/23/2021 19:36:33' prior: 50866012!
XXXXXBfsIncludes: yyyItem ZZZZZWith: yyyyworklist
	
	| aFinancialAsset |
	yyyyworklist size = 0 ifTrue: [^false].
	
	aFinancialAsset := yyyyworklist removeFirst.
	
	aFinancialAsset = yyyItem ifTrue: [^true].
	
	self XXXXXBfsIncludes: yyyItem ZZZZZWith: yyyyworklist.! !

!testRun: #PortfolioTest #test07CannotInsertARepeatedAccountInPortfolioOfOnlyAccounts stamp: 'e d r r 5/23/2021 19:37:24'!
FAILURE!

!testRun: #PortfolioTest #test07CannotInsertARepeatedAccountInPortfolioOfOnlyAccounts stamp: 'e d r r 5/23/2021 19:37:24'!
FAILURE!

!testRun: #PortfolioTest #test07CannotInsertARepeatedAccountInPortfolioOfOnlyAccounts stamp: 'e d r r 5/23/2021 19:37:37'!
FAILURE!

!testRun: #PortfolioTest #test07CannotInsertARepeatedAccountInPortfolioOfOnlyAccounts stamp: 'e d r r 5/23/2021 19:37:37'!
FAILURE!
!Portfolio methodsFor: 'as yet unclassified' stamp: 'e d r r 5/23/2021 19:42:06' prior: 50865936!
register: aFinancialAsset
	
	(self XXXXXBfsIncludes: aFinancialAsset ZZZZZWith: financialAssets copy) ifTrue: [self error: Portfolio attemptToInsertRepeatedFinancialAssetErrorDescription ].
	financialAssets add: aFinancialAsset

	! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'e d r r 5/23/2021 19:42:27' prior: 50866050!
register: aFinancialAsset
	
	(self XXXXXBfsIncludes: aFinancialAsset ZZZZZWith: financialAssets copy) ifTrue: 
		[ self error: Portfolio attemptToInsertRepeatedFinancialAssetErrorDescription ].
	financialAssets add: aFinancialAsset

	! !

!testRun: #PortfolioTest #test07CannotInsertARepeatedAccountInPortfolioOfOnlyAccounts stamp: 'e d r r 5/23/2021 19:42:57'!
ERROR!

!testRun: #PortfolioTest #test07CannotInsertARepeatedAccountInPortfolioOfOnlyAccounts stamp: 'e d r r 5/23/2021 19:42:57'!
ERROR!

!testRun: #PortfolioTest #test07CannotInsertARepeatedAccountInPortfolioOfOnlyAccounts stamp: 'e d r r 5/23/2021 19:43:18'!
ERROR!

!testRun: #PortfolioTest #test07CannotInsertARepeatedAccountInPortfolioOfOnlyAccounts stamp: 'e d r r 5/23/2021 19:45:04'!
ERROR!
!Portfolio methodsFor: 'as yet unclassified' stamp: 'e d r r 5/23/2021 19:46:58' prior: 50866061!
register: aFinancialAsset
	
	|copyFinancialAssets|
	copyFinancialAssets := financialAssets copy
.	(self XXXXXBfsIncludes: aFinancialAsset ZZZZZWith: copyFinancialAssets) ifTrue: 
		[ self error: Portfolio attemptToInsertRepeatedFinancialAssetErrorDescription ].
	financialAssets add: aFinancialAsset

	! !

!testRun: #PortfolioTest #test07CannotInsertARepeatedAccountInPortfolioOfOnlyAccounts stamp: 'e d r r 5/23/2021 19:47:05'!
ERROR!

!testRun: #PortfolioTest #test07CannotInsertARepeatedAccountInPortfolioOfOnlyAccounts stamp: 'e d r r 5/23/2021 19:47:05'!
ERROR!

aFinancialAsset!

copyFinancialAssets!

financialAssets copy!

copyFinancialAssets!

yyyyworklist!

aFinancialAsset!

yyyyworklist!

yyyyworklist!

copyFinancialAssets!

yyyyworklist!

aFinancialAsset!

yyyyworklist!

aFinancialAsset!

yyyItem!

yyyyworklist!

yyyyworklist!

yyyyworklist!
!Portfolio methodsFor: 'as yet unclassified' stamp: 'e d r r 5/23/2021 19:53:55' prior: 50866021!
XXXXXBfsIncludes: yyyItem ZZZZZWith: yyyyworklist
	
	| aFinancialAsset |
	yyyyworklist size = 0 ifTrue: [^false].
	
	aFinancialAsset := yyyyworklist removeFirst.
	
	aFinancialAsset = yyyItem ifTrue: [^true].
	
	^self XXXXXBfsIncludes: yyyItem ZZZZZWith: yyyyworklist.! !

!testRun: #PortfolioTest #test07CannotInsertARepeatedAccountInPortfolioOfOnlyAccounts stamp: 'e d r r 5/23/2021 19:54:02'!
PASSED!
!Portfolio methodsFor: 'as yet unclassified' stamp: 'e d r r 5/23/2021 19:57:54' prior: 50866118!
XXXXXBfsIncludes: yyyItem ZZZZZWith: yyyyworklist
	
	| aFinancialAsset |
	yyyyworklist size = 0 ifTrue: [^false].
	
	aFinancialAsset := yyyyworklist removeFirst.
	
	"(yyyItem isKindOf: self class) ifTrue: [
		
	]."
	aFinancialAsset = yyyItem ifTrue: [^true].
	
	^self XXXXXBfsIncludes: yyyItem ZZZZZWith: yyyyworklist.! !

!testRun: #PortfolioTest #test01PortfolioHaveZeroAsBalanceWhenCreated stamp: 'e d r r 5/23/2021 19:58:03'!
PASSED!

!testRun: #PortfolioTest #test02AccountIncreasesPortfolioBalanceValueOfYourTransactions stamp: 'e d r r 5/23/2021 19:58:03'!
PASSED!

!testRun: #PortfolioTest #test03PortfolioKnowsRegisteredTransactionsOfYourAccounts stamp: 'e d r r 5/23/2021 19:58:03'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioDoNotKnowNotRegisteredTransactionsOfYourAccounts stamp: 'e d r r 5/23/2021 19:58:03'!
PASSED!

!testRun: #PortfolioTest #test05AccountBalanceIncreasesPortfolioBalanceValueOfYourTransactions stamp: 'e d r r 5/23/2021 19:58:03'!
PASSED!

!testRun: #PortfolioTest #test06PortfolioKnowsRegisteredTransactionsOfYourAccountsAndYourPortfolios stamp: 'e d r r 5/23/2021 19:58:03'!
PASSED!

!testRun: #PortfolioTest #test07CannotInsertARepeatedAccountInPortfolioOfOnlyAccounts stamp: 'e d r r 5/23/2021 19:58:03'!
PASSED!
!Portfolio methodsFor: 'as yet unclassified' stamp: 'e d r r 5/23/2021 20:01:57' prior: 50866134!
XXXXXBfsIncludes: yyyItem ZZZZZWith: yyyyworklist
	
	| aFinancialAsset |
	yyyyworklist size = 0 ifTrue: [^false].
	
	aFinancialAsset := yyyyworklist removeFirst.
	
	aFinancialAsset = yyyItem ifTrue: [^true].
	
	^self XXXXXBfsIncludes: yyyItem ZZZZZWith: yyyyworklist.! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'e d r r 5/23/2021 20:22:57' prior: 50866177!
XXXXXBfsIncludes: aFinancialAssetToInsert ZZZZZWith: yyyyworklist
	
	| aFinancialAssetExtracted |
	yyyyworklist size = 0 ifTrue: [^false].
	
	aFinancialAssetExtracted := yyyyworklist removeFirst.
	
	aFinancialAssetExtracted = aFinancialAssetToInsert ifTrue: [^true].
	
	^self XXXXXBfsIncludes: aFinancialAssetToInsert ZZZZZWith: yyyyworklist.! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'e d r r 5/23/2021 20:24:52' prior: 50866189!
XXXXXBfsIncludes: aFinancialAssetToInsert ZZZZZWith: worklistOfFinancialAssets
	
	| aFinancialAssetExtracted |
	worklistOfFinancialAssets size = 0 ifTrue: [^false].
	
	aFinancialAssetExtracted := worklistOfFinancialAssets removeFirst.
	
	aFinancialAssetExtracted = aFinancialAssetToInsert ifTrue: [^true].
	
	^self XXXXXBfsIncludes: aFinancialAssetToInsert ZZZZZWith: worklistOfFinancialAssets.! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'e d r r 5/23/2021 20:28:46'!
Includes: aFinancialAssetToInsert On: worklistOfFinancialAssets
	
	| aFinancialAssetExtracted |
	worklistOfFinancialAssets size = 0 ifTrue: [^false].
	
	aFinancialAssetExtracted := worklistOfFinancialAssets removeFirst.
	
	aFinancialAssetExtracted = aFinancialAssetToInsert ifTrue: [^true].
	
	^self XXXXXBfsIncludes: aFinancialAssetToInsert ZZZZZWith: worklistOfFinancialAssets.! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'e d r r 5/23/2021 20:29:21' prior: 50866218!
Includes: aFinancialAssetToInsert On: worklistOfFinancialAssets
	
	| aFinancialAssetExtracted |
	worklistOfFinancialAssets size = 0 ifTrue: [^false].
	
	aFinancialAssetExtracted := worklistOfFinancialAssets removeFirst.
	
	aFinancialAssetExtracted = aFinancialAssetToInsert ifTrue: [^true].
	
	^self Includes: aFinancialAssetToInsert On: worklistOfFinancialAssets.! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'e d r r 5/23/2021 20:29:48' prior: 50866088!
register: aFinancialAsset
	
	|copyFinancialAssets|
	copyFinancialAssets := financialAssets copy
.	(self Includes: aFinancialAsset On: copyFinancialAssets) ifTrue: 
		[ self error: Portfolio attemptToInsertRepeatedFinancialAssetErrorDescription ].
	financialAssets add: aFinancialAsset

	! !

!methodRemoval: Portfolio #XXXXXBfsIncludes:ZZZZZWith: stamp: 'e d r r 5/23/2021 20:30:02'!
XXXXXBfsIncludes: aFinancialAssetToInsert ZZZZZWith: worklistOfFinancialAssets
	
	| aFinancialAssetExtracted |
	worklistOfFinancialAssets size = 0 ifTrue: [^false].
	
	aFinancialAssetExtracted := worklistOfFinancialAssets removeFirst.
	
	aFinancialAssetExtracted = aFinancialAssetToInsert ifTrue: [^true].
	
	^self XXXXXBfsIncludes: aFinancialAssetToInsert ZZZZZWith: worklistOfFinancialAssets.!

!testRun: #PortfolioTest #test07CannotInsertARepeatedAccountInPortfolioOfOnlyAccounts stamp: 'e d r r 5/23/2021 20:30:18'!
PASSED!
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'e d r r 5/23/2021 20:35:29'!
test08XXXXCannotInsertARepeatedAccountInPortfolioOfOnlyAccounts

	| account1 account2 portfolio |

	account1 := ReceptiveAccount  new.
	Deposit register: 100 on: account1.
	Deposit register: 50 on: account1.
	
	account2 := ReceptiveAccount  new.
	Deposit register: 200 on: account2.
	
	portfolio := Portfolio new.
	portfolio register: account1.
	portfolio register: account2.
	
	self 
		should: [portfolio register: account2]
		raise: Error
		withExceptionDo: [ :anError | self assert: anError messageText equals: Portfolio attemptToInsertRepeatedFinancialAssetErrorDescription ].
! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'e d r r 5/23/2021 20:41:26' prior: 50866281!
test08XXXXCannotInsertARepeatedAccountInPortfolioOfOnlyAccounts

	| portfolioIn portfolioOut account1 account2 |

	account1 := ReceptiveAccount  new.
	Deposit register: 200 on: account1.
	
	account2 := ReceptiveAccount  new.
	Deposit register: 100 on: account2.
	Deposit register: 50 on: account2.

	portfolioIn := Portfolio new.
	portfolioIn register: account2.
	
	portfolioOut := Portfolio new.
	portfolioOut register: account1.
	portfolioOut register: portfolioIn.
	
	self 
		should: [portfolioOut register: account2]
		raise: Error
		withExceptionDo: [ :anError | self assert: anError messageText equals: Portfolio attemptToInsertRepeatedFinancialAssetErrorDescription ].
! !

!testRun: #PortfolioTest #test08XXXXCannotInsertARepeatedAccountInPortfolioOfOnlyAccounts stamp: 'e d r r 5/23/2021 20:41:39'!
FAILURE!

!testRun: #PortfolioTest #test08XXXXCannotInsertARepeatedAccountInPortfolioOfOnlyAccounts stamp: 'e d r r 5/23/2021 20:41:39'!
FAILURE!
!Portfolio methodsFor: 'as yet unclassified' stamp: 'e d r r 5/23/2021 20:44:17' prior: 50866234!
Includes: aFinancialAssetToInsert On: worklistOfFinancialAssets
	
	| aFinancialAssetExtracted |
	worklistOfFinancialAssets size = 0 ifTrue: [^false].
	
	aFinancialAssetExtracted := worklistOfFinancialAssets removeFirst.
	
	aFinancialAssetExtracted = aFinancialAssetToInsert ifTrue: [^true].
	
	"worklistOfFinancialAssets addAllLast: aFinancialAssetExtracted ."
	
	^self Includes: aFinancialAssetToInsert On: worklistOfFinancialAssets.! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'e d r r 5/23/2021 20:44:45' prior: 50866336!
Includes: aFinancialAssetToInsert On: worklistOfFinancialAssets
	
	| aFinancialAssetExtracted |
	worklistOfFinancialAssets size = 0 ifTrue: [^false].
	
	aFinancialAssetExtracted := worklistOfFinancialAssets removeFirst.
	
	aFinancialAssetExtracted = aFinancialAssetToInsert ifTrue: [^true].
	
	"worklistOfFinancialAssets addAllLast: aFinancialAssetExtracted getFinancialAssets."
	
	^self Includes: aFinancialAssetToInsert On: worklistOfFinancialAssets.! !
!Portfolio methodsFor: 'nil' stamp: 'e d r r 5/23/2021 20:44:52'!
getFinancialAssets
	! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'e d r r 5/23/2021 20:44:53' prior: 50866370!
getFinancialAssets
	
	! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'e d r r 5/23/2021 20:45:02' prior: 50866374!
getFinancialAssets
	
	financialAssets! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'e d r r 5/23/2021 20:45:13' prior: 50866378!
getFinancialAssets
	
	^financialAssets! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'e d r r 5/23/2021 20:45:36' prior: 50866383!
getFinancialAssets
	
	^financialAssets! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'e d r r 5/23/2021 20:45:47'!
getFinancialAssetsCopy
	
	^financialAssets copy ! !

!methodRemoval: Portfolio #getFinancialAssets stamp: 'e d r r 5/23/2021 20:45:51'!
getFinancialAssets
	
	^financialAssets!
!Portfolio methodsFor: 'as yet unclassified' stamp: 'e d r r 5/23/2021 20:50:36' prior: 50866353!
Includes: aFinancialAssetToInsert On: worklistOfFinancialAssets
	
	| aFinancialAssetExtracted |
	worklistOfFinancialAssets size = 0 ifTrue: [^false].
	
	aFinancialAssetExtracted := worklistOfFinancialAssets removeFirst.
	
	aFinancialAssetExtracted = aFinancialAssetToInsert ifTrue: [^true].
	
	(worklistOfFinancialAssets isKindOf: Portfolio) ifTrue: 
		[worklistOfFinancialAssets addAllLast: aFinancialAssetExtracted getFinancialAssetsCopy].
	
	^self Includes: aFinancialAssetToInsert On: worklistOfFinancialAssets.! !

!testRun: #PortfolioTest #test08XXXXCannotInsertARepeatedAccountInPortfolioOfOnlyAccounts stamp: 'e d r r 5/23/2021 20:50:58'!
FAILURE!

!testRun: #PortfolioTest #test08XXXXCannotInsertARepeatedAccountInPortfolioOfOnlyAccounts stamp: 'e d r r 5/23/2021 20:50:58'!
FAILURE!

aFinancialAsset!

aFinancialAsset!

financialAssets!

aFinancialAssetToInsert!

worklistOfFinancialAssets!

aFinancialAssetExtracted!
!Portfolio methodsFor: 'as yet unclassified' stamp: 'e d r r 5/23/2021 20:55:32' prior: 50866401!
Includes: aFinancialAssetToInsert On: worklistOfFinancialAssets
	
	| aFinancialAssetExtracted |
	worklistOfFinancialAssets size = 0 ifTrue: [^false].
	
	aFinancialAssetExtracted := worklistOfFinancialAssets removeFirst.
	
	aFinancialAssetExtracted = aFinancialAssetToInsert ifTrue: [^true].
	
	(aFinancialAssetExtracted isKindOf: Portfolio) ifTrue: 
		[worklistOfFinancialAssets addAllLast: aFinancialAssetExtracted getFinancialAssetsCopy].
	
	^self Includes: aFinancialAssetToInsert On: worklistOfFinancialAssets.! !

!testRun: #PortfolioTest #test08XXXXCannotInsertARepeatedAccountInPortfolioOfOnlyAccounts stamp: 'e d r r 5/23/2021 20:55:36'!
PASSED!
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'e d r r 5/23/2021 21:00:48'!
test08CannotInsertARepeatedAccountInPortfolioOfAccountsAndPortfolio

	| portfolioIn portfolioOut account1 account2 |

	account1 := ReceptiveAccount  new.
	Deposit register: 200 on: account1.
	
	account2 := ReceptiveAccount  new.
	Deposit register: 100 on: account2.
	Deposit register: 50 on: account2.

	portfolioIn := Portfolio new.
	portfolioIn register: account2.
	
	portfolioOut := Portfolio new.
	portfolioOut register: account1.
	portfolioOut register: portfolioIn.
	
	self 
		should: [portfolioOut register: account2]
		raise: Error
		withExceptionDo: [ :anError | self assert: anError messageText equals: Portfolio attemptToInsertRepeatedFinancialAssetErrorDescription ].
! !

!methodRemoval: PortfolioTest #test08XXXXCannotInsertARepeatedAccountInPortfolioOfOnlyAccounts stamp: 'e d r r 5/23/2021 21:00:48'!
test08XXXXCannotInsertARepeatedAccountInPortfolioOfOnlyAccounts

	| portfolioIn portfolioOut account1 account2 |

	account1 := ReceptiveAccount  new.
	Deposit register: 200 on: account1.
	
	account2 := ReceptiveAccount  new.
	Deposit register: 100 on: account2.
	Deposit register: 50 on: account2.

	portfolioIn := Portfolio new.
	portfolioIn register: account2.
	
	portfolioOut := Portfolio new.
	portfolioOut register: account1.
	portfolioOut register: portfolioIn.
	
	self 
		should: [portfolioOut register: account2]
		raise: Error
		withExceptionDo: [ :anError | self assert: anError messageText equals: Portfolio attemptToInsertRepeatedFinancialAssetErrorDescription ].
!

!testRun: #PortfolioTest #test01PortfolioHaveZeroAsBalanceWhenCreated stamp: 'e d r r 5/23/2021 21:02:36'!
PASSED!

!testRun: #PortfolioTest #test02AccountIncreasesPortfolioBalanceValueOfYourTransactions stamp: 'e d r r 5/23/2021 21:02:36'!
PASSED!

!testRun: #PortfolioTest #test03PortfolioKnowsRegisteredTransactionsOfYourAccounts stamp: 'e d r r 5/23/2021 21:02:36'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioDoNotKnowNotRegisteredTransactionsOfYourAccounts stamp: 'e d r r 5/23/2021 21:02:36'!
PASSED!

!testRun: #PortfolioTest #test05AccountBalanceIncreasesPortfolioBalanceValueOfYourTransactions stamp: 'e d r r 5/23/2021 21:02:36'!
PASSED!

!testRun: #PortfolioTest #test06PortfolioKnowsRegisteredTransactionsOfYourAccountsAndYourPortfolios stamp: 'e d r r 5/23/2021 21:02:36'!
PASSED!

!testRun: #PortfolioTest #test07CannotInsertARepeatedAccountInPortfolioOfOnlyAccounts stamp: 'e d r r 5/23/2021 21:02:36'!
PASSED!

!testRun: #PortfolioTest #test08CannotInsertARepeatedAccountInPortfolioOfAccountsAndPortfolio stamp: 'e d r r 5/23/2021 21:02:36'!
PASSED!

!testRun: #PortfolioTest #test08CannotInsertARepeatedAccountInPortfolioOfAccountsAndPortfolio stamp: 'e d r r 5/23/2021 21:04:58'!
PASSED!
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'e d r r 5/23/2021 21:05:09'!
test09XXXXXCannotInsertARepeatedAccountInPortfolioOfAccountsAndPortfolio

	| portfolioIn portfolioOut account1 account2 |

	account1 := ReceptiveAccount  new.
	Deposit register: 200 on: account1.
	
	account2 := ReceptiveAccount  new.
	Deposit register: 100 on: account2.
	Deposit register: 50 on: account2.

	portfolioIn := Portfolio new.
	portfolioIn register: account2.
	
	portfolioOut := Portfolio new.
	portfolioOut register: account1.
	portfolioOut register: portfolioIn.
	
	self 
		should: [portfolioOut register: account2]
		raise: Error
		withExceptionDo: [ :anError | self assert: anError messageText equals: Portfolio attemptToInsertRepeatedFinancialAssetErrorDescription ].
! !

!methodRemoval: PortfolioTest #test09XXXXXCannotInsertARepeatedAccountInPortfolioOfAccountsAndPortfolio stamp: 'e d r r 5/23/2021 21:08:27'!
test09XXXXXCannotInsertARepeatedAccountInPortfolioOfAccountsAndPortfolio

	| portfolioIn portfolioOut account1 account2 |

	account1 := ReceptiveAccount  new.
	Deposit register: 200 on: account1.
	
	account2 := ReceptiveAccount  new.
	Deposit register: 100 on: account2.
	Deposit register: 50 on: account2.

	portfolioIn := Portfolio new.
	portfolioIn register: account2.
	
	portfolioOut := Portfolio new.
	portfolioOut register: account1.
	portfolioOut register: portfolioIn.
	
	self 
		should: [portfolioOut register: account2]
		raise: Error
		withExceptionDo: [ :anError | self assert: anError messageText equals: Portfolio attemptToInsertRepeatedFinancialAssetErrorDescription ].
!
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'e d r r 5/23/2021 21:08:35'!
test09XXXXXCannotInsertARepeatedAccountInPortfolioOfOnlyAccounts

	| account1 account2 portfolio |

	account1 := ReceptiveAccount  new.
	Deposit register: 100 on: account1.
	Deposit register: 50 on: account1.
	
	account2 := ReceptiveAccount  new.
	Deposit register: 200 on: account2.
	
	portfolio := Portfolio new.
	portfolio register: account1.
	portfolio register: account2.
	
	self 
		should: [portfolio register: account2]
		raise: Error
		withExceptionDo: [ :anError | self assert: anError messageText equals: Portfolio attemptToInsertRepeatedFinancialAssetErrorDescription ].
! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'e d r r 5/23/2021 21:10:57' prior: 50866597!
test09XXXXXCannotInsertARepeatedAccountInPortfolioOfOnlyAccounts

	| account1 account2 portfolio1 portfolio2 account3 |

	account1 := ReceptiveAccount  new.
	Deposit register: 100 on: account1.
	Deposit register: 50 on: account1.
	
	account2 := ReceptiveAccount  new.
	Deposit register: 200 on: account2.
	
	portfolio1 := Portfolio new.
	portfolio1 register: account1.
	portfolio1 register: account2.
	
	account3 := ReceptiveAccount  new.
	Deposit register: 300 on: account3.
	
	portfolio2 := Portfolio new.
	portfolio2 register: account3.
	
	self 
		should: [portfolio1 register: portfolio2]
		raise: Error
		withExceptionDo: [ :anError | self assert: anError messageText equals: Portfolio attemptToInsertRepeatedFinancialAssetErrorDescription ].
! !

!testRun: #PortfolioTest #test09XXXXXCannotInsertARepeatedAccountInPortfolioOfOnlyAccounts stamp: 'e d r r 5/23/2021 21:11:08'!
FAILURE!

!testRun: #PortfolioTest #test09XXXXXCannotInsertARepeatedAccountInPortfolioOfOnlyAccounts stamp: 'e d r r 5/23/2021 21:11:08'!
FAILURE!

!testRun: #PortfolioTest #test09XXXXXCannotInsertARepeatedAccountInPortfolioOfOnlyAccounts stamp: 'e d r r 5/23/2021 21:11:14'!
FAILURE!

!testRun: #PortfolioTest #test09XXXXXCannotInsertARepeatedAccountInPortfolioOfOnlyAccounts stamp: 'e d r r 5/23/2021 21:11:14'!
FAILURE!

!testRun: #PortfolioTest #test09XXXXXCannotInsertARepeatedAccountInPortfolioOfOnlyAccounts stamp: 'e d r r 5/23/2021 21:11:24'!
FAILURE!

!testRun: #PortfolioTest #test09XXXXXCannotInsertARepeatedAccountInPortfolioOfOnlyAccounts stamp: 'e d r r 5/23/2021 21:11:24'!
FAILURE!

!methodRemoval: PortfolioTest #test09XXXXXCannotInsertARepeatedAccountInPortfolioOfOnlyAccounts stamp: 'e d r r 5/23/2021 21:12:47'!
test09XXXXXCannotInsertARepeatedAccountInPortfolioOfOnlyAccounts

	| account1 account2 portfolio1 portfolio2 account3 |

	account1 := ReceptiveAccount  new.
	Deposit register: 100 on: account1.
	Deposit register: 50 on: account1.
	
	account2 := ReceptiveAccount  new.
	Deposit register: 200 on: account2.
	
	portfolio1 := Portfolio new.
	portfolio1 register: account1.
	portfolio1 register: account2.
	
	account3 := ReceptiveAccount  new.
	Deposit register: 300 on: account3.
	
	portfolio2 := Portfolio new.
	portfolio2 register: account3.
	
	self 
		should: [portfolio1 register: portfolio2]
		raise: Error
		withExceptionDo: [ :anError | self assert: anError messageText equals: Portfolio attemptToInsertRepeatedFinancialAssetErrorDescription ].
!
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'e d r r 5/23/2021 21:12:55'!
test09CannotInsertARepeatedAccountInPortfolioOfAccountsAndPortfolio

	| portfolioIn portfolioOut account1 account2 |

	account1 := ReceptiveAccount  new.
	Deposit register: 200 on: account1.
	
	account2 := ReceptiveAccount  new.
	Deposit register: 100 on: account2.
	Deposit register: 50 on: account2.

	portfolioIn := Portfolio new.
	portfolioIn register: account2.
	
	portfolioOut := Portfolio new.
	portfolioOut register: account1.
	portfolioOut register: portfolioIn.
	
	self 
		should: [portfolioOut register: account2]
		raise: Error
		withExceptionDo: [ :anError | self assert: anError messageText equals: Portfolio attemptToInsertRepeatedFinancialAssetErrorDescription ].
! !

!methodRemoval: PortfolioTest #test09CannotInsertARepeatedAccountInPortfolioOfAccountsAndPortfolio stamp: 'e d r r 5/23/2021 21:13:07'!
test09CannotInsertARepeatedAccountInPortfolioOfAccountsAndPortfolio

	| portfolioIn portfolioOut account1 account2 |

	account1 := ReceptiveAccount  new.
	Deposit register: 200 on: account1.
	
	account2 := ReceptiveAccount  new.
	Deposit register: 100 on: account2.
	Deposit register: 50 on: account2.

	portfolioIn := Portfolio new.
	portfolioIn register: account2.
	
	portfolioOut := Portfolio new.
	portfolioOut register: account1.
	portfolioOut register: portfolioIn.
	
	self 
		should: [portfolioOut register: account2]
		raise: Error
		withExceptionDo: [ :anError | self assert: anError messageText equals: Portfolio attemptToInsertRepeatedFinancialAssetErrorDescription ].
!
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'e d r r 5/23/2021 21:13:12'!
test09XXXXXCannotInsertARepeatedAccountInPortfolioOfAccountsAndPortfolio

	| portfolioIn portfolioOut account1 account2 |

	account1 := ReceptiveAccount  new.
	Deposit register: 200 on: account1.
	
	account2 := ReceptiveAccount  new.
	Deposit register: 100 on: account2.
	Deposit register: 50 on: account2.

	portfolioIn := Portfolio new.
	portfolioIn register: account2.
	
	portfolioOut := Portfolio new.
	portfolioOut register: account1.
	portfolioOut register: portfolioIn.
	
	self 
		should: [portfolioOut register: account2]
		raise: Error
		withExceptionDo: [ :anError | self assert: anError messageText equals: Portfolio attemptToInsertRepeatedFinancialAssetErrorDescription ].
! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'e d r r 5/23/2021 21:13:51' prior: 50866749!
test09XXXXXCannotInsertARepeatedAccountInPortfolioOfAccountsAndPortfolio

	| portfolioIn portfolioOut account1 account2 |

	account1 := ReceptiveAccount  new.
	Deposit register: 200 on: account1.
	
	account2 := ReceptiveAccount  new.
	Deposit register: 100 on: account2.
	Deposit register: 50 on: account2.

	portfolioIn := Portfolio new.
	portfolioIn register: account2.
	
	portfolioOut := Portfolio new.
	portfolioOut register: account1.
	portfolioOut register: portfolioIn.
	
	self 
		should: [portfolioOut register: portfolioIn]
		raise: Error
		withExceptionDo: [ :anError | self assert: anError messageText equals: Portfolio attemptToInsertRepeatedFinancialAssetErrorDescription ].
! !

!testRun: #PortfolioTest #test09XXXXXCannotInsertARepeatedAccountInPortfolioOfAccountsAndPortfolio stamp: 'e d r r 5/23/2021 21:14:02'!
PASSED!

!methodRemoval: PortfolioTest #test09XXXXXCannotInsertARepeatedAccountInPortfolioOfAccountsAndPortfolio stamp: 'e d r r 5/23/2021 21:14:20'!
test09XXXXXCannotInsertARepeatedAccountInPortfolioOfAccountsAndPortfolio

	| portfolioIn portfolioOut account1 account2 |

	account1 := ReceptiveAccount  new.
	Deposit register: 200 on: account1.
	
	account2 := ReceptiveAccount  new.
	Deposit register: 100 on: account2.
	Deposit register: 50 on: account2.

	portfolioIn := Portfolio new.
	portfolioIn register: account2.
	
	portfolioOut := Portfolio new.
	portfolioOut register: account1.
	portfolioOut register: portfolioIn.
	
	self 
		should: [portfolioOut register: portfolioIn]
		raise: Error
		withExceptionDo: [ :anError | self assert: anError messageText equals: Portfolio attemptToInsertRepeatedFinancialAssetErrorDescription ].
!
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'e d r r 5/23/2021 21:14:30'!
test089XXXXXCannotInsertARepeatedAccountInPortfolioOfAccountsAndPortfolio

	| portfolioIn portfolioOut account1 account2 |

	account1 := ReceptiveAccount  new.
	Deposit register: 200 on: account1.
	
	account2 := ReceptiveAccount  new.
	Deposit register: 100 on: account2.
	Deposit register: 50 on: account2.

	portfolioIn := Portfolio new.
	portfolioIn register: account2.
	
	portfolioOut := Portfolio new.
	portfolioOut register: account1.
	portfolioOut register: portfolioIn.
	
	self 
		should: [portfolioOut register: account2]
		raise: Error
		withExceptionDo: [ :anError | self assert: anError messageText equals: Portfolio attemptToInsertRepeatedFinancialAssetErrorDescription ].
! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'e d r r 5/23/2021 21:14:40'!
test09XXXXXCannotInsertARepeatedAccountInPortfolioOfAccountsAndPortfolio

	| portfolioIn portfolioOut account1 account2 |

	account1 := ReceptiveAccount  new.
	Deposit register: 200 on: account1.
	
	account2 := ReceptiveAccount  new.
	Deposit register: 100 on: account2.
	Deposit register: 50 on: account2.

	portfolioIn := Portfolio new.
	portfolioIn register: account2.
	
	portfolioOut := Portfolio new.
	portfolioOut register: account1.
	portfolioOut register: portfolioIn.
	
	self 
		should: [portfolioOut register: account2]
		raise: Error
		withExceptionDo: [ :anError | self assert: anError messageText equals: Portfolio attemptToInsertRepeatedFinancialAssetErrorDescription ].
! !

!methodRemoval: PortfolioTest #test089XXXXXCannotInsertARepeatedAccountInPortfolioOfAccountsAndPortfolio stamp: 'e d r r 5/23/2021 21:14:40'!
test089XXXXXCannotInsertARepeatedAccountInPortfolioOfAccountsAndPortfolio

	| portfolioIn portfolioOut account1 account2 |

	account1 := ReceptiveAccount  new.
	Deposit register: 200 on: account1.
	
	account2 := ReceptiveAccount  new.
	Deposit register: 100 on: account2.
	Deposit register: 50 on: account2.

	portfolioIn := Portfolio new.
	portfolioIn register: account2.
	
	portfolioOut := Portfolio new.
	portfolioOut register: account1.
	portfolioOut register: portfolioIn.
	
	self 
		should: [portfolioOut register: account2]
		raise: Error
		withExceptionDo: [ :anError | self assert: anError messageText equals: Portfolio attemptToInsertRepeatedFinancialAssetErrorDescription ].
!
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'e d r r 5/23/2021 21:17:31' prior: 50866854!
test09XXXXXCannotInsertARepeatedAccountInPortfolioOfAccountsAndPortfolio

	| portfolioIn1 portfolioIn2 portfolioOut account1 account2 |

	account1 := ReceptiveAccount  new.
	Deposit register: 200 on: account1.
	
	portfolioIn1 := Portfolio new.
	portfolioIn1 register: account1.
	
	account2 := ReceptiveAccount  new.
	Deposit register: 100 on: account2.
	Deposit register: 50 on: account2.

	portfolioIn2 := Portfolio new.
	portfolioIn2 register: account2.
	
	portfolioOut := Portfolio new.
	portfolioOut register: portfolioIn1.
	portfolioOut register: portfolioIn2.
	
	self 
		should: [portfolioOut register: account2]
		raise: Error
		withExceptionDo: [ :anError | self assert: anError messageText equals: Portfolio attemptToInsertRepeatedFinancialAssetErrorDescription ].
! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'e d r r 5/23/2021 21:17:40' prior: 50866905!
test09XXXXXCannotInsertARepeatedAccountInPortfolioOfAccountsAndPortfolio

	| portfolioIn1 portfolioIn2 portfolioOut account1 account2 |

	account1 := ReceptiveAccount  new.
	Deposit register: 200 on: account1.
	
	portfolioIn1 := Portfolio new.
	portfolioIn1 register: account1.
	
	account2 := ReceptiveAccount  new.
	Deposit register: 100 on: account2.
	Deposit register: 50 on: account2.

	portfolioIn2 := Portfolio new.
	portfolioIn2 register: account2.
	
	portfolioOut := Portfolio new.
	portfolioOut register: portfolioIn1.
	portfolioOut register: portfolioIn2.
	
	self 
		should: [portfolioOut register: portfolioIn2]
		raise: Error
		withExceptionDo: [ :anError | self assert: anError messageText equals: Portfolio attemptToInsertRepeatedFinancialAssetErrorDescription ].
! !

!testRun: #PortfolioTest #test09XXXXXCannotInsertARepeatedAccountInPortfolioOfAccountsAndPortfolio stamp: 'e d r r 5/23/2021 21:17:48'!
PASSED!

!testRun: #PortfolioTest #test09XXXXXCannotInsertARepeatedAccountInPortfolioOfAccountsAndPortfolio stamp: 'e d r r 5/23/2021 21:17:53'!
PASSED!

!testRun: #PortfolioTest #test09XXXXXCannotInsertARepeatedAccountInPortfolioOfAccountsAndPortfolio stamp: 'e d r r 5/23/2021 21:18:37'!
PASSED!

!testRun: #PortfolioTest #test01PortfolioHaveZeroAsBalanceWhenCreated stamp: 'e d r r 5/23/2021 21:18:41'!
PASSED!

!testRun: #PortfolioTest #test02AccountIncreasesPortfolioBalanceValueOfYourTransactions stamp: 'e d r r 5/23/2021 21:18:41'!
PASSED!

!testRun: #PortfolioTest #test03PortfolioKnowsRegisteredTransactionsOfYourAccounts stamp: 'e d r r 5/23/2021 21:18:41'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioDoNotKnowNotRegisteredTransactionsOfYourAccounts stamp: 'e d r r 5/23/2021 21:18:41'!
PASSED!

!testRun: #PortfolioTest #test05AccountBalanceIncreasesPortfolioBalanceValueOfYourTransactions stamp: 'e d r r 5/23/2021 21:18:41'!
PASSED!

!testRun: #PortfolioTest #test06PortfolioKnowsRegisteredTransactionsOfYourAccountsAndYourPortfolios stamp: 'e d r r 5/23/2021 21:18:41'!
PASSED!

!testRun: #PortfolioTest #test07CannotInsertARepeatedAccountInPortfolioOfOnlyAccounts stamp: 'e d r r 5/23/2021 21:18:41'!
PASSED!

!testRun: #PortfolioTest #test08CannotInsertARepeatedAccountInPortfolioOfAccountsAndPortfolio stamp: 'e d r r 5/23/2021 21:18:41'!
PASSED!

!testRun: #PortfolioTest #test09XXXXXCannotInsertARepeatedAccountInPortfolioOfAccountsAndPortfolio stamp: 'e d r r 5/23/2021 21:18:41'!
PASSED!

!methodRemoval: PortfolioTest #test09XXXXXCannotInsertARepeatedAccountInPortfolioOfAccountsAndPortfolio stamp: 'e d r r 5/23/2021 21:20:00'!
test09XXXXXCannotInsertARepeatedAccountInPortfolioOfAccountsAndPortfolio

	| portfolioIn1 portfolioIn2 portfolioOut account1 account2 |

	account1 := ReceptiveAccount  new.
	Deposit register: 200 on: account1.
	
	portfolioIn1 := Portfolio new.
	portfolioIn1 register: account1.
	
	account2 := ReceptiveAccount  new.
	Deposit register: 100 on: account2.
	Deposit register: 50 on: account2.

	portfolioIn2 := Portfolio new.
	portfolioIn2 register: account2.
	
	portfolioOut := Portfolio new.
	portfolioOut register: portfolioIn1.
	portfolioOut register: portfolioIn2.
	
	self 
		should: [portfolioOut register: portfolioIn2]
		raise: Error
		withExceptionDo: [ :anError | self assert: anError messageText equals: Portfolio attemptToInsertRepeatedFinancialAssetErrorDescription ].
!
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'e d r r 5/23/2021 21:22:44'!
test09XXXXXCannotInsertARepeatedAccountInPortfolioOfOnlyAccounts

	| account1 account2 portfolio |

	account1 := ReceptiveAccount  new.
	Deposit register: 100 on: account1.
	Deposit register: 50 on: account1.
	
	account2 := ReceptiveAccount  new.
	Deposit register: 200 on: account2.
	
	portfolio := Portfolio new.
	portfolio register: account1.
	portfolio register: account2.
	
	self 
		should: [portfolio register: account2]
		raise: Error
		withExceptionDo: [ :anError | self assert: anError messageText equals: Portfolio attemptToInsertRepeatedFinancialAssetErrorDescription ].
! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'e d r r 5/23/2021 21:23:54' prior: 50867041!
test09XXXXXCannotInsertARepeatedAccountInPortfolioOfOnlyAccounts

	| account1 account2 account3 portfolio |

	account1 := ReceptiveAccount  new.
	Deposit register: 100 on: account1.
	Deposit register: 50 on: account1.
	
	account2 := ReceptiveAccount  new.
	Deposit register: 200 on: account2.
	
	account3 := ReceptiveAccount  new.
	Deposit register: 200 on: account3.
	
	portfolio := Portfolio new.
	portfolio register: account1.
	portfolio register: account2.
	
	self 
		should: [portfolio register: account3]
		raise: Error
		withExceptionDo: [ :anError | self assert: anError messageText equals: Portfolio attemptToInsertRepeatedFinancialAssetErrorDescription ].
! !

!testRun: #PortfolioTest #test09XXXXXCannotInsertARepeatedAccountInPortfolioOfOnlyAccounts stamp: 'e d r r 5/23/2021 21:24:06'!
FAILURE!

!testRun: #PortfolioTest #test09XXXXXCannotInsertARepeatedAccountInPortfolioOfOnlyAccounts stamp: 'e d r r 5/23/2021 21:24:06'!
FAILURE!

!testRun: #PortfolioTest #test09XXXXXCannotInsertARepeatedAccountInPortfolioOfOnlyAccounts stamp: 'e d r r 5/23/2021 21:24:41'!
FAILURE!

!testRun: #PortfolioTest #test09XXXXXCannotInsertARepeatedAccountInPortfolioOfOnlyAccounts stamp: 'e d r r 5/23/2021 21:24:41'!
FAILURE!

account1!

account2!

account3!

worklistOfFinancialAssets!

worklistOfFinancialAssets!

^self Includes: aFinancialAssetToInsert On: worklistOfFinancialAssets!

aFinancialAssetToInsert!

ReceptiveAccount!

self transactions !

aFinancialAssetExtracted!

self transactions !

!testRun: #PortfolioTest #test09XXXXXCannotInsertARepeatedAccountInPortfolioOfOnlyAccounts stamp: 'e d r r 5/23/2021 21:32:47'!
FAILURE!

!testRun: #PortfolioTest #test09XXXXXCannotInsertARepeatedAccountInPortfolioOfOnlyAccounts stamp: 'e d r r 5/23/2021 21:32:47'!
FAILURE!

worklistOfFinancialAssets!

aFinancialAssetExtracted!

self transactions !

aFinancialAssetToInsert!

self transactions !

aFinancialAssetToInsert!

self transactions !

aFinancialAssetExtracted!

self transactions !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'e d r r 5/23/2021 21:48:35'!
test09CannotInsertARepeatedAccountOfTheSameCollaboratorInPortfolioOfOnlyAccounts

	| account1 account2 account3 portfolio |

	account1 := ReceptiveAccount  new.
	Deposit register: 100 on: account1.
	Deposit register: 50 on: account1.
	
	account2 := ReceptiveAccount  new.
	Deposit register: 200 on: account2.
	
	account3 := ReceptiveAccount  new.
	Deposit register: 200 on: account3.
	
	portfolio := Portfolio new.
	portfolio register: account1.
	portfolio register: account2.
	
	self 
		should: [portfolio register: account3]
		raise: Error
		withExceptionDo: [ :anError | self assert: anError messageText equals: Portfolio attemptToInsertRepeatedFinancialAssetErrorDescription ].
! !

!methodRemoval: PortfolioTest #test09XXXXXCannotInsertARepeatedAccountInPortfolioOfOnlyAccounts stamp: 'e d r r 5/23/2021 21:48:35'!
test09XXXXXCannotInsertARepeatedAccountInPortfolioOfOnlyAccounts

	| account1 account2 account3 portfolio |

	account1 := ReceptiveAccount  new.
	Deposit register: 100 on: account1.
	Deposit register: 50 on: account1.
	
	account2 := ReceptiveAccount  new.
	Deposit register: 200 on: account2.
	
	account3 := ReceptiveAccount  new.
	Deposit register: 200 on: account3.
	
	portfolio := Portfolio new.
	portfolio register: account1.
	portfolio register: account2.
	
	self 
		should: [portfolio register: account3]
		raise: Error
		withExceptionDo: [ :anError | self assert: anError messageText equals: Portfolio attemptToInsertRepeatedFinancialAssetErrorDescription ].
!
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'e d r r 5/23/2021 21:49:14'!
test07CannotInsertARepeatedAccountOfTheSameCollaboratorInPortfolioOfOnlyAccounts

	| account1 account2 portfolio |

	account1 := ReceptiveAccount  new.
	Deposit register: 100 on: account1.
	Deposit register: 50 on: account1.
	
	account2 := ReceptiveAccount  new.
	Deposit register: 200 on: account2.
	
	portfolio := Portfolio new.
	portfolio register: account1.
	portfolio register: account2.
	
	self 
		should: [portfolio register: account2]
		raise: Error
		withExceptionDo: [ :anError | self assert: anError messageText equals: Portfolio attemptToInsertRepeatedFinancialAssetErrorDescription ].
! !

!methodRemoval: PortfolioTest #test07CannotInsertARepeatedAccountInPortfolioOfOnlyAccounts stamp: 'e d r r 5/23/2021 21:49:14'!
test07CannotInsertARepeatedAccountInPortfolioOfOnlyAccounts

	| account1 account2 portfolio |

	account1 := ReceptiveAccount  new.
	Deposit register: 100 on: account1.
	Deposit register: 50 on: account1.
	
	account2 := ReceptiveAccount  new.
	Deposit register: 200 on: account2.
	
	portfolio := Portfolio new.
	portfolio register: account1.
	portfolio register: account2.
	
	self 
		should: [portfolio register: account2]
		raise: Error
		withExceptionDo: [ :anError | self assert: anError messageText equals: Portfolio attemptToInsertRepeatedFinancialAssetErrorDescription ].
!
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'e d r r 5/23/2021 21:50:30'!
test08CannotInsertARepeatedAccountOfTheSameCollaboratorInPortfolioOfAccountsAndPortfolio

	| portfolioIn portfolioOut account1 account2 |

	account1 := ReceptiveAccount  new.
	Deposit register: 200 on: account1.
	
	account2 := ReceptiveAccount  new.
	Deposit register: 100 on: account2.
	Deposit register: 50 on: account2.

	portfolioIn := Portfolio new.
	portfolioIn register: account2.
	
	portfolioOut := Portfolio new.
	portfolioOut register: account1.
	portfolioOut register: portfolioIn.
	
	self 
		should: [portfolioOut register: account2]
		raise: Error
		withExceptionDo: [ :anError | self assert: anError messageText equals: Portfolio attemptToInsertRepeatedFinancialAssetErrorDescription ].
! !

!methodRemoval: PortfolioTest #test08CannotInsertARepeatedAccountInPortfolioOfAccountsAndPortfolio stamp: 'e d r r 5/23/2021 21:50:30'!
test08CannotInsertARepeatedAccountInPortfolioOfAccountsAndPortfolio

	| portfolioIn portfolioOut account1 account2 |

	account1 := ReceptiveAccount  new.
	Deposit register: 200 on: account1.
	
	account2 := ReceptiveAccount  new.
	Deposit register: 100 on: account2.
	Deposit register: 50 on: account2.

	portfolioIn := Portfolio new.
	portfolioIn register: account2.
	
	portfolioOut := Portfolio new.
	portfolioOut register: account1.
	portfolioOut register: portfolioIn.
	
	self 
		should: [portfolioOut register: account2]
		raise: Error
		withExceptionDo: [ :anError | self assert: anError messageText equals: Portfolio attemptToInsertRepeatedFinancialAssetErrorDescription ].
!
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'e d r r 5/23/2021 21:51:25'!
test09CannotInsertARepeatedAccountOfDifferentCollaboratorInPortfolioOfOnlyAccounts

	| account1 account2 account3 portfolio |

	account1 := ReceptiveAccount  new.
	Deposit register: 100 on: account1.
	Deposit register: 50 on: account1.
	
	account2 := ReceptiveAccount  new.
	Deposit register: 200 on: account2.
	
	account3 := ReceptiveAccount  new.
	Deposit register: 200 on: account3.
	
	portfolio := Portfolio new.
	portfolio register: account1.
	portfolio register: account2.
	
	self 
		should: [portfolio register: account3]
		raise: Error
		withExceptionDo: [ :anError | self assert: anError messageText equals: Portfolio attemptToInsertRepeatedFinancialAssetErrorDescription ].
! !

!methodRemoval: PortfolioTest #test09CannotInsertARepeatedAccountOfTheSameCollaboratorInPortfolioOfOnlyAccounts stamp: 'e d r r 5/23/2021 21:51:25'!
test09CannotInsertARepeatedAccountOfTheSameCollaboratorInPortfolioOfOnlyAccounts

	| account1 account2 account3 portfolio |

	account1 := ReceptiveAccount  new.
	Deposit register: 100 on: account1.
	Deposit register: 50 on: account1.
	
	account2 := ReceptiveAccount  new.
	Deposit register: 200 on: account2.
	
	account3 := ReceptiveAccount  new.
	Deposit register: 200 on: account3.
	
	portfolio := Portfolio new.
	portfolio register: account1.
	portfolio register: account2.
	
	self 
		should: [portfolio register: account3]
		raise: Error
		withExceptionDo: [ :anError | self assert: anError messageText equals: Portfolio attemptToInsertRepeatedFinancialAssetErrorDescription ].
!

!testRun: #PortfolioTest #test01PortfolioHaveZeroAsBalanceWhenCreated stamp: 'e d r r 5/23/2021 21:51:38'!
PASSED!

!testRun: #PortfolioTest #test02AccountIncreasesPortfolioBalanceValueOfYourTransactions stamp: 'e d r r 5/23/2021 21:51:43'!
PASSED!

!testRun: #PortfolioTest #test03PortfolioKnowsRegisteredTransactionsOfYourAccounts stamp: 'e d r r 5/23/2021 21:51:48'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioDoNotKnowNotRegisteredTransactionsOfYourAccounts stamp: 'e d r r 5/23/2021 21:51:52'!
PASSED!

!testRun: #PortfolioTest #test05AccountBalanceIncreasesPortfolioBalanceValueOfYourTransactions stamp: 'e d r r 5/23/2021 21:51:57'!
PASSED!

!testRun: #PortfolioTest #test06PortfolioKnowsRegisteredTransactionsOfYourAccountsAndYourPortfolios stamp: 'e d r r 5/23/2021 21:52:01'!
PASSED!

!testRun: #PortfolioTest #test07CannotInsertARepeatedAccountOfTheSameCollaboratorInPortfolioOfOnlyAccounts stamp: 'e d r r 5/23/2021 21:52:06'!
PASSED!

!testRun: #PortfolioTest #test08CannotInsertARepeatedAccountOfTheSameCollaboratorInPortfolioOfAccountsAndPortfolio stamp: 'e d r r 5/23/2021 21:52:10'!
PASSED!

----QUIT----(23 May 2021 22:00:21) CuisUniversity-4532.image priorSource: 17091588!